{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/AddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\ncontract AddressRegistry {\r\n    // address of the owner\r\n    address public immutable owner;\r\n\r\n    // address of the marketplace\r\n    address public marketplace;\r\n\r\n    //address of the auction\r\n    address public auction;\r\n\r\n    // address of the platform nft container\r\n    address public nft;\r\n\r\n    // address of the nft factory\r\n    address public nftFactory;\r\n\r\n    // address of weth token\r\n    address public WETH;\r\n\r\n    /// @notice to check if is valid nft contract\r\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not contract owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function updateMarketplace(address _marketplace) public onlyOwner {\r\n        marketplace = _marketplace;\r\n    }\r\n\r\n    function updateAuction(address _auction) public onlyOwner {\r\n        auction = _auction;\r\n    }\r\n\r\n    function updateNft(address _nft) public onlyOwner {\r\n        require(\r\n            IERC165(_nft).supportsInterface(INTERFACE_ID_ERC721),\r\n            \"invalid nft address\"\r\n        );\r\n        nft = _nft;\r\n    }\r\n\r\n    function updateNftFactory(address _nftFactory) public onlyOwner {\r\n        nftFactory = _nftFactory;\r\n    }\r\n\r\n    function updateWETH(address _WETH) public onlyOwner {\r\n        WETH = _WETH;\r\n    }\r\n}\r\n"
    },
    "contracts/Auction.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\n\r\ninterface IAddressRegistry {\r\n    function marketplace() external view returns (address);\r\n}\r\n\r\ninterface IMarketplace {\r\n    function listedItems(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) external view returns (address, uint256 price, bool);\r\n\r\n    function transferNFTtoAuctionWinner(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _winner\r\n    ) external;\r\n}\r\n\r\ncontract Auction is ReentrancyGuard {\r\n    // events\r\n    event AuctionCreated(\r\n        address indexed nft,\r\n        uint256 indexed tokenId,\r\n        uint256 minBid,\r\n        uint256 startTime,\r\n        uint256 endTime\r\n    );\r\n\r\n    event AuctionCanceled(address indexed nft, uint256 indexed tokenId);\r\n\r\n    event UpdatedPlatformFee(uint256 platformFee);\r\n\r\n    event UpdatedPlatformFeeRecipient(address recipient);\r\n    event BidPlaced(\r\n        address indexed nft,\r\n        uint256 indexed tokenId,\r\n        address indexed bidder,\r\n        uint256 bid\r\n    );\r\n\r\n    event BidRefunded(\r\n        address indexed nft,\r\n        uint256 indexed tokenId,\r\n        address indexed bidder,\r\n        uint256 bid\r\n    );\r\n\r\n    event BidWithdrawn(\r\n        address indexed nft,\r\n        uint256 indexed tokenId,\r\n        address indexed bidder,\r\n        uint256 bid\r\n    );\r\n\r\n    event AuctionResulted(\r\n        address oldOwner,\r\n        address indexed nft,\r\n        uint256 indexed tokenId,\r\n        address indexed winner,\r\n        uint256 winingPrice\r\n    );\r\n\r\n    event PauseToggled(bool isPaused);\r\n\r\n    event UpdatedMinBid(\r\n        address indexed nft,\r\n        uint256 indexed tokenId,\r\n        uint256 newMinBid\r\n    );\r\n\r\n    event UpdatedStartTime(\r\n        address indexed nft,\r\n        uint256 indexed tokenId,\r\n        uint256 newStartTime\r\n    );\r\n\r\n    event UpdatedEndTime(\r\n        address indexed nft,\r\n        uint256 indexed tokenId,\r\n        uint256 newEndTime\r\n    );\r\n\r\n    // structs\r\n    struct AuctionStructure {\r\n        address payable owner;\r\n        uint256 minBid;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bool resulted;\r\n    }\r\n    struct HighestBid {\r\n        address payable bidder;\r\n        uint256 bid;\r\n        uint256 lastBidTime;\r\n    }\r\n\r\n    /// @notice owner of the contract\r\n    address public immutable owner;\r\n\r\n    /// @notice platform fee recipient\r\n    address payable public platformFeeRecipient;\r\n\r\n    /// @notice platform fee percentage\r\n    uint256 public platformFee;\r\n\r\n    /// @notice pause variable for pausing the contract\r\n    bool public isPaused;\r\n\r\n    ///@notice address registry\r\n    IAddressRegistry public addressRegistry;\r\n\r\n    // mappings\r\n    /// @notice nft address -> token id -> auction\r\n    mapping(address => mapping(uint256 => AuctionStructure)) public auctions;\r\n\r\n    /// @notice nft address -> token id -> highest bid\r\n    mapping(address => mapping(uint256 => HighestBid)) public highestBids;\r\n\r\n    // modifiers\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not owner\");\r\n        _;\r\n    }\r\n    modifier whenNotPaused() {\r\n        require(!isPaused, \"contract is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier isNftOwner(address _nftAddress, uint256 _tokenId) {\r\n        IERC721 nft = IERC721(_nftAddress);\r\n        require(nft.ownerOf(_tokenId) == msg.sender, \"not the token owner\");\r\n        _;\r\n    }\r\n\r\n    modifier auctionNotExist(address _nftAddress, uint256 _tokenId) {\r\n        require(\r\n            auctions[_nftAddress][_tokenId].endTime == 0,\r\n            \"auction already exist\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier auctionExist(address _nftAddress, uint256 _tokenId) {\r\n        require(\r\n            auctions[_nftAddress][_tokenId].endTime > 0,\r\n            \"auction not exist\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _platformFee, address payable _feeRecipient) {\r\n        platformFeeRecipient = _feeRecipient;\r\n        platformFee = _platformFee;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n @notice method for creating new auction\r\n @dev only when not paused\r\n @dev only if auction not exist\r\n @dev only if listed\r\n @param _nftAddress nft contract address\r\n @param _tokenId nft token id\r\n @param _minBid minimum bid required\r\n @param _startTime time to start the auction\r\n @param _endTime time to end the auction\r\n*/\r\n    function createAuction(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _minBid,\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    )\r\n        external\r\n        whenNotPaused\r\n        isNftOwner(_nftAddress, _tokenId)\r\n        auctionNotExist(_nftAddress, _tokenId)\r\n    {\r\n        IMarketplace marketplace = IMarketplace(addressRegistry.marketplace());\r\n        (, uint256 price, ) = marketplace.listedItems(_nftAddress, _tokenId);\r\n        require(price > 0, \"item is not listed\");\r\n        require(_startTime > _getNow(), \"invalid time start\");\r\n        require(\r\n            _endTime >= _startTime + 300,\r\n            \"end time should be more than 5 mins\"\r\n        );\r\n\r\n        auctions[_nftAddress][_tokenId] = AuctionStructure({\r\n            owner: payable(msg.sender),\r\n            minBid: _minBid,\r\n            startTime: _startTime,\r\n            endTime: _endTime,\r\n            resulted: false\r\n        });\r\n\r\n        emit AuctionCreated(\r\n            _nftAddress,\r\n            _tokenId,\r\n            _minBid,\r\n            _startTime,\r\n            _endTime\r\n        );\r\n    }\r\n\r\n    /**\r\n @notice method for canceling auction\r\n @dev only when not paused\r\n @dev only if exist\r\n @param _nftAddress nft contract address\r\n @param _tokenId nft token id\r\n*/\r\n    function cancelAuction(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) external nonReentrant auctionExist(_nftAddress, _tokenId) {\r\n        AuctionStructure memory auction = auctions[_nftAddress][_tokenId];\r\n        require(\r\n            IERC721(_nftAddress).ownerOf(_tokenId) == msg.sender &&\r\n                auction.owner == msg.sender,\r\n            \"not nft owner\"\r\n        );\r\n        require(!auction.resulted, \"auction already resulted\");\r\n        HighestBid memory highestBid = highestBids[_nftAddress][_tokenId];\r\n        if (highestBid.bidder != address(0)) {\r\n            _refundHighestBidder(\r\n                _nftAddress,\r\n                _tokenId,\r\n                highestBid.bidder,\r\n                highestBid.bid\r\n            );\r\n\r\n            // clear highest bidder\r\n            delete (highestBids[_nftAddress][_tokenId]);\r\n        }\r\n\r\n        // clear auction\r\n        delete (auctions[_nftAddress][_tokenId]);\r\n\r\n        emit AuctionCanceled(_nftAddress, _tokenId);\r\n    }\r\n\r\n    /**\r\n @notice method for placing a bid\r\n @dev only when not paused\r\n @dev only if exist\r\n @param _nftAddress nft contract address\r\n @param _tokenId nft token id\r\n*/\r\n    function placeBid(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        whenNotPaused\r\n        auctionExist(_nftAddress, _tokenId)\r\n    {\r\n        AuctionStructure memory auction = auctions[_nftAddress][_tokenId];\r\n        HighestBid storage highestBid = highestBids[_nftAddress][_tokenId];\r\n        require(\r\n            _getNow() < auction.endTime && _getNow() >= auction.startTime,\r\n            \"out of time\"\r\n        );\r\n        require(!auction.resulted, \"auction has resulted\");\r\n        require(msg.value >= auction.minBid, \"bid is less than minimum bid\");\r\n        require(msg.value > highestBid.bid, \"failed to outBid highest bidder\");\r\n        if (highestBid.bidder != address(0)) {\r\n            _refundHighestBidder(\r\n                _nftAddress,\r\n                _tokenId,\r\n                highestBid.bidder,\r\n                highestBid.bid\r\n            );\r\n        }\r\n\r\n        highestBid.bid = msg.value;\r\n        highestBid.bidder = payable(msg.sender);\r\n        highestBid.lastBidTime = _getNow();\r\n\r\n        emit BidPlaced(_nftAddress, _tokenId, msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n @notice method for withdraw bid by highest bidder after 12 hours\r\n @dev only highest bidder\r\n @param _nftAddress nft contract address\r\n @param _tokenId nft token id\r\n*/\r\n    function withdrawBid(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) external nonReentrant {\r\n        HighestBid memory highestBid = highestBids[_nftAddress][_tokenId];\r\n        require(\r\n            msg.sender == highestBid.bidder,\r\n            \"you are not the highest bidder\"\r\n        );\r\n        uint256 _endTime = auctions[_nftAddress][_tokenId].endTime;\r\n        require(\r\n            _getNow() > _endTime && _getNow() - _endTime >= 43200,\r\n            \"can withdraw only after 12 hours auction has ended\"\r\n        );\r\n\r\n        uint256 previousBid = highestBid.bid;\r\n\r\n        //cleaning the existing top bidder\r\n        delete (highestBids[_nftAddress][_tokenId]);\r\n\r\n        // refunding the top bidder\r\n        _refundHighestBidder(\r\n            _nftAddress,\r\n            _tokenId,\r\n            payable(msg.sender),\r\n            previousBid\r\n        );\r\n\r\n        emit BidWithdrawn(_nftAddress, _tokenId, msg.sender, previousBid);\r\n    }\r\n\r\n    /**\r\n @notice method for resulting the finished auction\r\n @dev only nft owner\r\n @dev only if there is a bidder\r\n @param _nftAddress nft contract address\r\n @param _tokenId nft token id\r\n*/\r\n    function resultAuction(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        nonReentrant\r\n        auctionExist(_nftAddress, _tokenId)\r\n        isNftOwner(_nftAddress, _tokenId)\r\n    {\r\n        AuctionStructure storage auction = auctions[_nftAddress][_tokenId];\r\n        // ensure caller is owner\r\n        require(msg.sender == auction.owner, \"not owner\");\r\n        // ensure auction is ended\r\n        require(_getNow() > auction.endTime, \"auction not ended\");\r\n        // ensure auction has not resulted\r\n        require(!auction.resulted, \"auction already resulted\");\r\n\r\n        // checking highest bidder info\r\n        HighestBid memory highestBid = highestBids[_nftAddress][_tokenId];\r\n        address winner = highestBid.bidder;\r\n        uint256 winningBid = highestBid.bid;\r\n\r\n        // if there is no bids delete the auction\r\n        if (winner == address(0)) {\r\n            delete (auctions[_nftAddress][_tokenId]);\r\n            revert(\"there is no bidder\");\r\n        }\r\n\r\n        // ensure value is higher than minimum bid\r\n        require(winningBid >= auction.minBid, \"amount lower than minimum bid\");\r\n\r\n        auction.resulted = true;\r\n\r\n        delete (highestBids[_nftAddress][_tokenId]);\r\n\r\n        _resultAuction(\r\n            _nftAddress,\r\n            _tokenId,\r\n            auction.owner,\r\n            winner,\r\n            winningBid\r\n        );\r\n    }\r\n\r\n    /**\r\n @notice method for updating minimum bid\r\n @dev only if exist\r\n @dev only auction owner\r\n @param _nftAddress nft contract address\r\n @param _tokenId nft token id\r\n @param _newMinBid new minimum bid\r\n*/\r\n    function updateMinBid(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _newMinBid\r\n    ) external auctionExist(_nftAddress, _tokenId) {\r\n        AuctionStructure storage auction = auctions[_nftAddress][_tokenId];\r\n        require(msg.sender == auction.owner, \"not auction owner\");\r\n        require(!auction.resulted, \"auction already resulted\");\r\n\r\n        HighestBid memory highestBid = highestBids[_nftAddress][_tokenId];\r\n        // check if there is highest bid\r\n        require(\r\n            highestBid.bid == 0,\r\n            \"cannot update the minimum bid if bidder exist\"\r\n        );\r\n\r\n        auction.minBid = _newMinBid;\r\n\r\n        emit UpdatedMinBid(_nftAddress, _tokenId, _newMinBid);\r\n    }\r\n\r\n    /**\r\n @notice method for updating start time\r\n @dev only if exist\r\n @dev only auction owner\r\n @param _nftAddress nft contract address\r\n @param _tokenId nft token id\r\n @param _newStartTime new start time\r\n*/\r\n    function updateStartTime(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _newStartTime\r\n    ) external auctionExist(_nftAddress, _tokenId) {\r\n        AuctionStructure storage auction = auctions[_nftAddress][_tokenId];\r\n        require(msg.sender == auction.owner, \"not auction owner\");\r\n        require(!auction.resulted, \"auction already resulted\");\r\n        require(_newStartTime > 0, \"invalid start time\");\r\n        require(auction.startTime + 60 > _getNow(), \"auction already started\");\r\n        require(\r\n            _newStartTime + 300 < auction.endTime,\r\n            \"auction start time should be less than end time by 5 min\"\r\n        );\r\n\r\n        auction.startTime = _newStartTime;\r\n        emit UpdatedStartTime(_nftAddress, _tokenId, _newStartTime);\r\n    }\r\n\r\n    /**\r\n @notice method for updating end time\r\n @dev only if exist\r\n @dev only auction owner\r\n @param _nftAddress nft contract address\r\n @param _tokenId nft token id\r\n @param _newEndTime new start time\r\n*/\r\n    function updateEndTime(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _newEndTime\r\n    ) external auctionExist(_nftAddress, _tokenId) {\r\n        AuctionStructure storage auction = auctions[_nftAddress][_tokenId];\r\n        require(msg.sender == auction.owner, \"not auction owner\");\r\n        require(!auction.resulted, \"auction already resulted\");\r\n        require(_newEndTime > 0, \"invalid end time\");\r\n        require(_getNow() < auction.endTime, \"auction is ended\");\r\n        require(\r\n            _newEndTime > auction.startTime + 300,\r\n            \"auction end time should be greater than start time by 5 mins\"\r\n        );\r\n        require(\r\n            _newEndTime > _getNow() + 300,\r\n            \"end time should be more than 5 mins\"\r\n        );\r\n\r\n        auction.endTime = _newEndTime;\r\n        emit UpdatedEndTime(_nftAddress, _tokenId, _newEndTime);\r\n    }\r\n\r\n    /// @notice updates the platform fee\r\n    /// @dev only admin\r\n    /// @param _platformFee new platform fee to set\r\n    function updatePlatformFee(uint256 _platformFee) public onlyOwner {\r\n        platformFee = _platformFee;\r\n        emit UpdatedPlatformFee(_platformFee);\r\n    }\r\n\r\n    /// @notice updates the fee recipient\r\n    /// @dev only admin\r\n    /// @param _feeRecipient new fee recipient to receive platform fee\r\n    function updateFeeRecipient(\r\n        address payable _feeRecipient\r\n    ) public onlyOwner {\r\n        require(_feeRecipient != address(0), \"recipient cannot be empty\");\r\n        platformFeeRecipient = _feeRecipient;\r\n        emit UpdatedPlatformFeeRecipient(_feeRecipient);\r\n    }\r\n\r\n    /**\r\n     @notice update address registry\r\n     @dev only admin\r\n     @param _newAddress new address\r\n     */\r\n    function updateAddressRegistry(address _newAddress) public onlyOwner {\r\n        addressRegistry = IAddressRegistry(_newAddress);\r\n    }\r\n\r\n    /**\r\n     @notice Toggling the pause \r\n     @dev Only admin\r\n     */\r\n    function toggleIsPaused() external onlyOwner {\r\n        isPaused = !isPaused;\r\n        emit PauseToggled(isPaused);\r\n    }\r\n\r\n    /// Getter functions\r\n\r\n    /**\r\n     @notice Method for getting all info about the auction\r\n     @param _nftAddress ERC 721 Address\r\n     @param _tokenId Token id of the nft\r\n     */\r\n    function getAuction(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address payable auctionOwner,\r\n            uint256 minBid,\r\n            uint256 startTime,\r\n            uint256 endTime,\r\n            bool resulted\r\n        )\r\n    {\r\n        AuctionStructure memory auction = auctions[_nftAddress][_tokenId];\r\n\r\n        return (\r\n            auction.owner,\r\n            auction.minBid,\r\n            auction.startTime,\r\n            auction.endTime,\r\n            auction.resulted\r\n        );\r\n    }\r\n\r\n    /**\r\n     @notice Method for getting all info about the highest bidder\r\n     @param _nftAddress ERC 721 Address\r\n     @param _tokenId Token id of the nft\r\n     */\r\n    function getHighestBidder(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        view\r\n        returns (address payable bidder, uint256 bid, uint256 lastBidTime)\r\n    {\r\n        HighestBid memory highestBid = highestBids[_nftAddress][_tokenId];\r\n\r\n        return (highestBid.bidder, highestBid.bid, highestBid.lastBidTime);\r\n    }\r\n\r\n    /// @notice getting block timestamp\r\n    function _getNow() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n @notice method for resulting auction\r\n @param _nftAddress ERC 721 Address\r\n @param _tokenId nft token id\r\n @param auctionOwner address of auction owner\r\n @param winner address of winner\r\n @param winningBid bid amount\r\n*/\r\n    function _resultAuction(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address auctionOwner,\r\n        address winner,\r\n        uint256 winningBid\r\n    ) private {\r\n        uint256 feeAmount;\r\n\r\n        // sending fee to platform owner\r\n        feeAmount = (winningBid * platformFee) / 1000;\r\n        (bool successFee, ) = platformFeeRecipient.call{value: feeAmount}(\"\");\r\n        require(successFee, \"failed to transfer fee\");\r\n\r\n        // sending royalty fee to owner if collection supports ERC2981 standard\r\n        if (\r\n            IERC165(_nftAddress).supportsInterface(type(IERC2981).interfaceId)\r\n        ) {\r\n            (address receiver, uint256 royaltyFee) = IERC2981(_nftAddress)\r\n                .royaltyInfo(_tokenId, winningBid);\r\n\r\n            (bool royaltySuccess, ) = payable(receiver).call{value: royaltyFee}(\r\n                \"\"\r\n            );\r\n            require(royaltySuccess, \"failed to transfer the royalty\");\r\n            feeAmount += royaltyFee;\r\n        }\r\n\r\n        // sending bid to auction owner\r\n        (bool successTransfer, ) = auctionOwner.call{\r\n            value: winningBid - feeAmount\r\n        }(\"\");\r\n        require(successTransfer, \"failed to transfer the amount to owner\");\r\n\r\n        // sending nft to winner using marketplace function (because marketplace is approved to move token)\r\n        IMarketplace marketplace = IMarketplace(addressRegistry.marketplace());\r\n        marketplace.transferNFTtoAuctionWinner(_nftAddress, _tokenId, winner);\r\n\r\n        emit AuctionResulted(\r\n            msg.sender,\r\n            _nftAddress,\r\n            _tokenId,\r\n            winner,\r\n            winningBid\r\n        );\r\n\r\n        delete (auctions[_nftAddress][_tokenId]);\r\n    }\r\n\r\n    /**\r\n @notice method for refunding highest bidder\r\n @param _nftAddress ERC 721 Address\r\n @param _tokenId nft token id\r\n @param _bidder address of bidder \r\n @param _bid amount\r\n*/\r\n    function _refundHighestBidder(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address payable _bidder,\r\n        uint256 _bid\r\n    ) private {\r\n        (bool successRefund, ) = _bidder.call{value: _bid}(\"\");\r\n        require(successRefund, \"failed to refund the highest bidder\");\r\n\r\n        emit BidRefunded(_nftAddress, _tokenId, _bidder, _bid);\r\n    }\r\n}\r\n"
    },
    "contracts/Marketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IAddressRegistry {\r\n    function auction() external view returns (address);\r\n\r\n    function WETH() external view returns (address);\r\n}\r\n\r\ninterface IAuction {\r\n    function auctions(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) external view returns (address, uint256, uint256, uint256, bool);\r\n}\r\n\r\ncontract Marketplace is ReentrancyGuard {\r\n    /// @dev events of the contract\r\n    event ItemListed(\r\n        address indexed owner,\r\n        address indexed nftAddress,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n\r\n    event UpdatedPlatformFee(uint96 platformFee);\r\n    event UpdatedFeeRecipient(address feeRecipient);\r\n\r\n    event ItemCanceled(\r\n        address indexed owner,\r\n        address indexed nftAddress,\r\n        uint256 tokenId\r\n    );\r\n    event ItemUpdated(\r\n        address indexed owner,\r\n        address indexed nftAddress,\r\n        uint256 tokenId,\r\n        uint256 newPrice\r\n    );\r\n    event ItemSold(\r\n        address indexed seller,\r\n        address indexed buyer,\r\n        address indexed nft,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n    event OfferCreated(\r\n        address indexed offerer,\r\n        address indexed nft,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    );\r\n\r\n    event OfferCanceled(\r\n        address indexed creator,\r\n        address indexed nft,\r\n        uint256 tokenId\r\n    );\r\n\r\n    /// @notice structure for listing each item\r\n    struct Listing {\r\n        address owner;\r\n        uint256 price;\r\n        bool sold;\r\n    }\r\n\r\n    /// @notice structure for each offer\r\n    struct Offer {\r\n        uint256 offer; // amount\r\n        uint256 expiration; //expiration time\r\n    }\r\n\r\n    /// @notice NFT address -> token id -> owner -> price\r\n    mapping(address => mapping(uint256 => Listing)) public listedItems;\r\n    /// @notice NFT address -> token id -> offerer -> offer\r\n    mapping(address => mapping(uint256 => mapping(address => Offer)))\r\n        public offers;\r\n\r\n    /// @notice to check if is valid nft contract\r\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /// @notice owner of the contract\r\n    address public immutable owner;\r\n\r\n    /// @notice platform fee in percentage 1 to 1000 eg 25 = 2.5%\r\n    uint16 public platformFee;\r\n\r\n    /// @notice fee recipient\r\n    address payable public feeRecipient;\r\n\r\n    ///@notice address registry\r\n    IAddressRegistry public addressRegistry;\r\n\r\n    /// @notice modifier to check caller is nft owner\r\n    modifier isNftOwner(address _nftAddress, uint256 _tokenId) {\r\n        IERC721 nft = IERC721(_nftAddress);\r\n        require(nft.ownerOf(_tokenId) == msg.sender, \"not the token owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    /// @notice modifier to check if item is already listed\r\n    modifier notListed(address _nftAddress, uint256 _tokenId) {\r\n        Listing memory listing = listedItems[_nftAddress][_tokenId];\r\n        require(listing.price == 0, \"item is already listed\");\r\n        _;\r\n    }\r\n    /// @notice modifier to make sure item is listed\r\n    modifier isListed(address _nftAddress, uint256 _tokenId) {\r\n        Listing memory listing = listedItems[_nftAddress][_tokenId];\r\n\r\n        require(listing.price > 0, \"item is not listed\");\r\n        _;\r\n    }\r\n\r\n    /// @notice check if offer already exist\r\n    modifier offerExist(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _creator\r\n    ) {\r\n        Offer memory targetOffer = offers[_nftAddress][_tokenId][_creator];\r\n        require(\r\n            targetOffer.offer > 0 || targetOffer.expiration > _getNow(),\r\n            \"offer doesn't exist or expired\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice check if offer not exist\r\n    modifier offerNotExist(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _creator\r\n    ) {\r\n        Offer memory targetOffer = offers[_nftAddress][_tokenId][_creator];\r\n        require(targetOffer.offer == 0, \"offer already created\");\r\n        _;\r\n    }\r\n\r\n    /// @notice contract constructor\r\n    constructor(uint16 _platformFee, address payable _feeRecipient) {\r\n        platformFee = _platformFee;\r\n        feeRecipient = _feeRecipient;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice for listing new items on marketplace\r\n    /// @dev only valid nft contracts\r\n    /// @dev only admin or approved person\r\n    /// @dev only if not listed before\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    /// @param _price price for list it\r\n    function listItem(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _price\r\n    )\r\n        external\r\n        notListed(_nftAddress, _tokenId)\r\n        isNftOwner(_nftAddress, _tokenId)\r\n    {\r\n        try\r\n            IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)\r\n        returns (bool supported) {\r\n            // Contracts support ERC-165\r\n            require(supported, \"not erc 721 contract\");\r\n        } catch (bytes memory /*lowLevelData*/) {\r\n            // Contracts doesn't support ERC-165\r\n            revert(\"doesn't support ERC-165\");\r\n        }\r\n\r\n        IERC721 nft = IERC721(_nftAddress);\r\n        require(\r\n            nft.isApprovedForAll(msg.sender, address(this)) ||\r\n                nft.getApproved(_tokenId) == address(this),\r\n            \"not approved for marketplace\"\r\n        );\r\n        require(_price > 0, \"price cannot be zero\");\r\n\r\n        listedItems[_nftAddress][_tokenId] = Listing(msg.sender, _price, false);\r\n\r\n        emit ItemListed(msg.sender, _nftAddress, _tokenId, _price);\r\n    }\r\n\r\n    ///@notice update the listing price\r\n    /// @dev only admin\r\n    /// @dev only if it's listed for sale\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    /// @param _newPrice new price to update listing\r\n    function updateListing(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _newPrice\r\n    ) public isNftOwner(_nftAddress, _tokenId) isListed(_nftAddress, _tokenId) {\r\n        require(_newPrice > 0, \"price cannot be less than zero\");\r\n        Listing storage listing = listedItems[_nftAddress][_tokenId];\r\n        listing.price = _newPrice;\r\n\r\n        emit ItemUpdated(msg.sender, _nftAddress, _tokenId, _newPrice);\r\n    }\r\n\r\n    /// @notice cancel listed nft\r\n    /// @dev only admin\r\n    /// @dev only if it's listed for sale\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    function cancelListing(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) public isNftOwner(_nftAddress, _tokenId) isListed(_nftAddress, _tokenId) {\r\n        delete (listedItems[_nftAddress][_tokenId]);\r\n        emit ItemCanceled(msg.sender, _nftAddress, _tokenId);\r\n    }\r\n\r\n    /// @notice for buying an item from marketplace\r\n    /// @dev only if it's listed for sale\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    function buyItem(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) public payable isListed(_nftAddress, _tokenId) {\r\n        Listing memory listing = listedItems[_nftAddress][_tokenId];\r\n\r\n        require(\r\n            msg.value >= listing.price,\r\n            \"insufficient funds for buying nft\"\r\n        );\r\n\r\n        IAuction auction = IAuction(addressRegistry.auction());\r\n        (, , uint256 startTime, , bool result) = auction.auctions(\r\n            _nftAddress,\r\n            _tokenId\r\n        );\r\n        require(\r\n            startTime == 0 || result == true,\r\n            \"cannot buy an item when auction is going on\"\r\n        );\r\n        // calculate the fee\r\n        uint256 feeAmount;\r\n\r\n        feeAmount = (msg.value * platformFee) / 1000;\r\n\r\n        (bool feeSuccess, ) = feeRecipient.call{value: feeAmount}(\"\");\r\n        require(feeSuccess, \"transfer failed for paying tax\");\r\n\r\n        // sending royalty fee to owner if collection supports ERC2981 standard\r\n        if (\r\n            IERC165(_nftAddress).supportsInterface(type(IERC2981).interfaceId)\r\n        ) {\r\n            (address receiver, uint256 royaltyFee) = IERC2981(_nftAddress)\r\n                .royaltyInfo(_tokenId, msg.value);\r\n\r\n            (bool royaltySuccess, ) = payable(receiver).call{value: royaltyFee}(\r\n                \"\"\r\n            );\r\n            require(royaltySuccess, \"failed to transfer the royalty\");\r\n            feeAmount += royaltyFee;\r\n        }\r\n\r\n        (bool sellerSuccess, ) = payable(listing.owner).call{\r\n            value: msg.value - feeAmount\r\n        }(\"\");\r\n        require(sellerSuccess, \"transfer failed for nft owner\");\r\n        delete (listedItems[_nftAddress][_tokenId]);\r\n\r\n        IERC721(_nftAddress).safeTransferFrom(\r\n            listing.owner,\r\n            msg.sender,\r\n            _tokenId\r\n        );\r\n        emit ItemSold(\r\n            listing.owner,\r\n            msg.sender,\r\n            _nftAddress,\r\n            _tokenId,\r\n            listing.price\r\n        );\r\n    }\r\n\r\n    /// @notice method for offering item\r\n    /// @dev only if it's listed for sale\r\n    /// @dev converted into two functions because of (stack too deep error)\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    /// @param _wethAmount amount in weth token\r\n    /// @param _expiration offers expiration date\r\n    function createOffer(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _wethAmount,\r\n        uint256 _expiration\r\n    )\r\n        public\r\n        isListed(_nftAddress, _tokenId)\r\n        offerNotExist(_nftAddress, _tokenId, msg.sender)\r\n    {\r\n        require(_wethAmount > 0, \"your offer cannot be 0\");\r\n        require(_expiration > _getNow(), \"invalid expiration\");\r\n        // check allowance amount for contract to move tokens\r\n        address wethAddress = addressRegistry.WETH();\r\n        require(\r\n            IERC20(wethAddress).allowance(msg.sender, address(this)) >=\r\n                _wethAmount,\r\n            \"Insufficient WETH allowance\"\r\n        );\r\n\r\n        _createOffer(\r\n            _nftAddress,\r\n            _tokenId,\r\n            _wethAmount,\r\n            msg.sender,\r\n            _expiration\r\n        );\r\n    }\r\n\r\n    /// @notice method for canceling existing offer\r\n    /// @dev only if offer exist\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    function cancelOffer(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) public offerExist(_nftAddress, _tokenId, msg.sender) {\r\n        delete (offers[_nftAddress][_tokenId][msg.sender]);\r\n        emit OfferCanceled(msg.sender, _nftAddress, _tokenId);\r\n    }\r\n\r\n    /// @notice method for accepting offer\r\n    /// @dev only nft admin\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    /// @param _creator offer creator address\r\n    function acceptOffer(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _creator\r\n    )\r\n        public\r\n        nonReentrant\r\n        isNftOwner(_nftAddress, _tokenId)\r\n        offerExist(_nftAddress, _tokenId, _creator)\r\n    {\r\n        _acceptOffer(_nftAddress, _tokenId, _creator);\r\n    }\r\n\r\n    /// @notice updates the platform fee\r\n    /// @dev only admin\r\n    /// @param _platformFee new platform fee to set\r\n    function updatePlatformFee(uint16 _platformFee) public onlyOwner {\r\n        platformFee = _platformFee;\r\n        emit UpdatedPlatformFee(_platformFee);\r\n    }\r\n\r\n    /// @notice updates the fee recipient\r\n    /// @dev only admin\r\n    /// @param _feeRecipient new fee recipient to receive platform fee\r\n    function updateFeeRecipient(\r\n        address payable _feeRecipient\r\n    ) public onlyOwner {\r\n        require(_feeRecipient != address(0), \"recipient cannot be empty\");\r\n\r\n        feeRecipient = _feeRecipient;\r\n        emit UpdatedFeeRecipient(_feeRecipient);\r\n    }\r\n\r\n    /**\r\n     @notice update address registry\r\n     @dev only admin\r\n     @param _newAddress new address\r\n     */\r\n    function updateAddressRegistry(address _newAddress) public onlyOwner {\r\n        addressRegistry = IAddressRegistry(_newAddress);\r\n    }\r\n\r\n    function _getNow() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /// @notice method for transfer and cancel nft listing\r\n    /// @dev only auction contract can call this function\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    /// @param _winner nft token id\r\n    function transferNFTtoAuctionWinner(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _winner\r\n    ) external isListed(_nftAddress, _tokenId) {\r\n        require(\r\n            msg.sender == addressRegistry.auction(),\r\n            \"only auction contract can call this\"\r\n        );\r\n\r\n        // delete listing\r\n        delete (listedItems[_nftAddress][_tokenId]);\r\n\r\n        // send nft to auction winner\r\n        IERC721 nft = IERC721(_nftAddress);\r\n        nft.safeTransferFrom(nft.ownerOf(_tokenId), _winner, _tokenId);\r\n    }\r\n\r\n    function _acceptOffer(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _creator\r\n    ) private {\r\n        Offer memory targetOffer = offers[_nftAddress][_tokenId][_creator];\r\n\r\n        address wethAddress = addressRegistry.WETH();\r\n        uint256 feeAmount;\r\n\r\n        feeAmount = (targetOffer.offer * platformFee) / 1000;\r\n        require(\r\n            IERC20(wethAddress).transferFrom(_creator, feeRecipient, feeAmount),\r\n            \"WETH transfer failed\"\r\n        );\r\n\r\n        // sending royalty fee to owner if collection supports ERC2981 standard\r\n        if (\r\n            IERC165(_nftAddress).supportsInterface(type(IERC2981).interfaceId)\r\n        ) {\r\n            (address receiver, uint256 royaltyFee) = IERC2981(_nftAddress)\r\n                .royaltyInfo(_tokenId, targetOffer.offer);\r\n\r\n            require(\r\n                IERC20(wethAddress).transferFrom(\r\n                    _creator,\r\n                    receiver,\r\n                    royaltyFee\r\n                ),\r\n                \"WETH transfer failed\"\r\n            );\r\n\r\n            feeAmount += royaltyFee;\r\n        }\r\n\r\n        require(\r\n            IERC20(wethAddress).transferFrom(\r\n                _creator,\r\n                msg.sender,\r\n                targetOffer.offer - feeAmount\r\n            ),\r\n            \"WETH transfer failed\"\r\n        );\r\n\r\n        delete (offers[_nftAddress][_tokenId][_creator]);\r\n        delete (listedItems[_nftAddress][_tokenId]);\r\n\r\n        IERC721(_nftAddress).safeTransferFrom(msg.sender, _creator, _tokenId);\r\n\r\n        emit ItemSold(\r\n            msg.sender,\r\n            _creator,\r\n            _nftAddress,\r\n            _tokenId,\r\n            targetOffer.offer\r\n        );\r\n        emit OfferCanceled(_creator, _nftAddress, _tokenId);\r\n    }\r\n\r\n    /// @dev if auction exist offer cannot be created\r\n    function _createOffer(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _wethAmount,\r\n        address _creator,\r\n        uint256 _expiration\r\n    ) private {\r\n        IAuction auction = IAuction(addressRegistry.auction());\r\n        (, , uint256 startTime, , bool result) = auction.auctions(\r\n            _nftAddress,\r\n            _tokenId\r\n        );\r\n        require(\r\n            startTime == 0 || result == true,\r\n            \"cannot place an offer when auction is going on\"\r\n        );\r\n        offers[_nftAddress][_tokenId][_creator] = Offer(\r\n            _wethAmount,\r\n            _expiration\r\n        );\r\n        emit OfferCreated(msg.sender, _nftAddress, _tokenId, _wethAmount);\r\n    }\r\n}\r\n"
    },
    "contracts/NFTCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @dev imports\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\r\n\r\ncontract NFTCollection is ERC721URIStorage, ERC2981 {\r\n    /// @dev events of the contract\r\n    event Minted(\r\n        uint256 tokenId,\r\n        string tokenURI,\r\n        address minter,\r\n        string collectionName\r\n    );\r\n    event UpdatedRoyalty(address feeRecipient, uint96 royaltyFee);\r\n\r\n    /// @notice owner of the collection\r\n    address public immutable owner;\r\n    /// @notice token id counter\r\n    uint256 public tokenIds;\r\n\r\n    /// @dev modifiers of contract\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    /// @notice contract constructor for initializing new collection\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint96 _royaltyFee,\r\n        address payable _feeRecipient,\r\n        address _owner\r\n    ) ERC721(name, symbol) {\r\n        owner = _owner;\r\n\r\n        // setting royalty fee on collection with eip 2981 standard\r\n        _setDefaultRoyalty(_feeRecipient, _royaltyFee);\r\n    }\r\n\r\n    function mint(string memory _tokenURI) public onlyOwner returns (uint256) {\r\n        require(bytes(_tokenURI).length > 0, \"no token uri\");\r\n\r\n        uint256 newTokenId = tokenIds += 1;\r\n        _safeMint(msg.sender, newTokenId);\r\n        _setTokenURI(newTokenId, _tokenURI);\r\n        emit Minted(newTokenId, _tokenURI, msg.sender, name());\r\n        return newTokenId;\r\n    }\r\n\r\n    /**\r\n    @notice updates the royalty status\r\n    @dev only admin\r\n    @param _feeRecipient new fee recipient to receive platform fee\r\n    @param _royaltyFee new royalty fee to set\r\n     */\r\n    function updateRoyalty(\r\n        address _feeRecipient,\r\n        uint96 _royaltyFee\r\n    ) public onlyOwner {\r\n        require(_feeRecipient != address(0), \"recipient cannot be empty\");\r\n        require(_royaltyFee <= 1000, \"royalty fee cannot be more than 10%\");\r\n\r\n        _setDefaultRoyalty(_feeRecipient, _royaltyFee);\r\n\r\n        emit UpdatedRoyalty(_feeRecipient, _royaltyFee);\r\n    }\r\n\r\n    /**\r\n     @notice Method for removing the royalty\r\n     */\r\n    function removeRoyalty() public onlyOwner {\r\n        _deleteDefaultRoyalty();\r\n    }\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view override(ERC721, ERC2981) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "contracts/NFTFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @dev imports\r\nimport \"./NFTCollection.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\ncontract NFTFactory {\r\n    // events\r\n    event CollectionCreated(\r\n        address indexed owner,\r\n        address indexed collectionsAddress\r\n    );\r\n    event UpdatedPlatformFee(uint256 platformFee);\r\n    event UpdatedFeeRecipient(address feeRecipient);\r\n\r\n    struct Collection {\r\n        address collectionAddress;\r\n        string name;\r\n    }\r\n\r\n    /// @notice user address -> collection addresses array\r\n    mapping(address => Collection[]) public collectionsOwned;\r\n\r\n    /// @notice owner of the collection\r\n    address public immutable owner;\r\n    /// @notice fee recipient\r\n    address payable public feeRecipient;\r\n    /// @notice platform fee for each new nft collection\r\n    uint256 public platformFee;\r\n    /// @notice deployed and available collections array\r\n    address[] public deployedCollections;\r\n    /// @notice to check if is valid nft contract\r\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /// @dev modifiers of contract\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _platformFee, address payable _feeRecipient) {\r\n        platformFee = _platformFee;\r\n        feeRecipient = _feeRecipient;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice method for creating new collection\r\n    /// @param _name collection name\r\n    /// @param _symbol collection symbol\r\n    /// @param _royaltyFee collection royalty fee\r\n    /// @param _collectionFeeRecipient address of fee recipient\r\n    function createCollection(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint16 _royaltyFee,\r\n        address payable _collectionFeeRecipient\r\n    ) public payable {\r\n        require(msg.value >= platformFee, \"not enough funds\");\r\n        require(_royaltyFee <= 1000, \"max royalty fee is 10 percent\"); // 1000 = 10%\r\n\r\n        (bool success, ) = feeRecipient.call{value: msg.value}(\"\");\r\n        require(success, \"transfer failed\");\r\n\r\n        // deploying new collection and passing the args\r\n        NFTCollection newCollection = new NFTCollection(\r\n            _name,\r\n            _symbol,\r\n            _royaltyFee,\r\n            _collectionFeeRecipient,\r\n            msg.sender\r\n        );\r\n\r\n        deployedCollections.push(address(newCollection));\r\n        collectionsOwned[msg.sender].push(\r\n            Collection(address(newCollection), _name)\r\n        );\r\n\r\n        emit CollectionCreated(msg.sender, address(newCollection));\r\n    }\r\n\r\n    /// @notice updates the platform fee\r\n    /// @dev only admin\r\n    /// @param _platformFee new platform fee to set\r\n    function updatePlatformFee(uint256 _platformFee) public onlyOwner {\r\n        platformFee = _platformFee;\r\n        emit UpdatedPlatformFee(_platformFee);\r\n    }\r\n\r\n    /// @notice updates the fee recipient\r\n    /// @dev only admin\r\n    /// @param _feeRecipient new fee recipient to receive platform fee\r\n    function updateFeeRecipient(\r\n        address payable _feeRecipient\r\n    ) public onlyOwner {\r\n        require(_feeRecipient != address(0), \"recipient cannot be empty\");\r\n\r\n        feeRecipient = _feeRecipient;\r\n        emit UpdatedFeeRecipient(_feeRecipient);\r\n    }\r\n\r\n    /// @notice method for getting all addresses owned by user\r\n    function getCollectionsOwned(\r\n        address user\r\n    ) public view returns (Collection[] memory) {\r\n        return collectionsOwned[user];\r\n    }\r\n}\r\n"
    },
    "contracts/WETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract WETH is ERC20 {\r\n    event Deposit(address indexed account, uint256 amount);\r\n    event Withdraw(address indexed account, uint256 amount);\r\n\r\n    constructor() ERC20(\"Wrapped Ether\", \"WETH\") {}\r\n\r\n    function deposit() public payable {\r\n        _mint(msg.sender, msg.value);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}