{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Marketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IAddressRegistry {\r\n    function auction() external view returns (address);\r\n\r\n    function WETH() external view returns (address);\r\n}\r\n\r\ninterface IAuction {\r\n    function auctions(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) external view returns (address, uint256, uint256, uint256, bool);\r\n}\r\n\r\ncontract Marketplace is ReentrancyGuard {\r\n    /// @dev events of the contract\r\n    event ItemListed(\r\n        address indexed owner,\r\n        address indexed nftAddress,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n\r\n    event UpdatedPlatformFee(uint96 platformFee);\r\n    event UpdatedFeeRecipient(address feeRecipient);\r\n\r\n    event ItemCanceled(\r\n        address indexed owner,\r\n        address indexed nftAddress,\r\n        uint256 tokenId\r\n    );\r\n    event ItemUpdated(\r\n        address indexed owner,\r\n        address indexed nftAddress,\r\n        uint256 tokenId,\r\n        uint256 newPrice\r\n    );\r\n    event ItemSold(\r\n        address indexed seller,\r\n        address indexed buyer,\r\n        address indexed nft,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n    event OfferCreated(\r\n        address indexed offerer,\r\n        address indexed nft,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    );\r\n\r\n    event OfferCanceled(\r\n        address indexed creator,\r\n        address indexed nft,\r\n        uint256 tokenId\r\n    );\r\n\r\n    /// @notice structure for listing each item\r\n    struct Listing {\r\n        address owner;\r\n        uint256 price;\r\n        bool sold;\r\n    }\r\n\r\n    /// @notice structure for each offer\r\n    struct Offer {\r\n        uint256 offer; // amount\r\n        uint256 expiration; //expiration time\r\n    }\r\n\r\n    /// @notice NFT address -> token id -> owner -> price\r\n    mapping(address => mapping(uint256 => Listing)) public listedItems;\r\n    /// @notice NFT address -> token id -> offerer -> offer\r\n    mapping(address => mapping(uint256 => mapping(address => Offer)))\r\n        public offers;\r\n\r\n    /// @notice to check if is valid nft contract\r\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /// @notice owner of the contract\r\n    address public immutable owner;\r\n\r\n    /// @notice platform fee in percentage 1 to 1000 eg 25 = 2.5%\r\n    uint16 public platformFee;\r\n\r\n    /// @notice fee recipient\r\n    address payable public feeRecipient;\r\n\r\n    ///@notice address registry\r\n    IAddressRegistry public addressRegistry;\r\n\r\n    /// @notice modifier to check caller is nft owner\r\n    modifier isNftOwner(address _nftAddress, uint256 _tokenId) {\r\n        IERC721 nft = IERC721(_nftAddress);\r\n        require(nft.ownerOf(_tokenId) == msg.sender, \"not the token owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    /// @notice modifier to check if item is already listed\r\n    modifier notListed(address _nftAddress, uint256 _tokenId) {\r\n        Listing memory listing = listedItems[_nftAddress][_tokenId];\r\n        require(listing.price == 0, \"item is already listed\");\r\n        _;\r\n    }\r\n    /// @notice modifier to make sure item is listed\r\n    modifier isListed(address _nftAddress, uint256 _tokenId) {\r\n        Listing memory listing = listedItems[_nftAddress][_tokenId];\r\n\r\n        require(listing.price > 0, \"item is not listed\");\r\n        _;\r\n    }\r\n\r\n    /// @notice check if offer already exist\r\n    modifier offerExist(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _creator\r\n    ) {\r\n        Offer memory targetOffer = offers[_nftAddress][_tokenId][_creator];\r\n        require(\r\n            targetOffer.offer > 0 || targetOffer.expiration > _getNow(),\r\n            \"offer doesn't exist or expired\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice check if offer not exist\r\n    modifier offerNotExist(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _creator\r\n    ) {\r\n        Offer memory targetOffer = offers[_nftAddress][_tokenId][_creator];\r\n        require(targetOffer.offer == 0, \"offer already created\");\r\n        _;\r\n    }\r\n\r\n    /// @notice contract constructor\r\n    constructor(uint16 _platformFee, address payable _feeRecipient) {\r\n        platformFee = _platformFee;\r\n        feeRecipient = _feeRecipient;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice for listing new items on marketplace\r\n    /// @dev only valid nft contracts\r\n    /// @dev only admin or approved person\r\n    /// @dev only if not listed before\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    /// @param _price price for list it\r\n    function listItem(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _price\r\n    )\r\n        external\r\n        notListed(_nftAddress, _tokenId)\r\n        isNftOwner(_nftAddress, _tokenId)\r\n    {\r\n        try\r\n            IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)\r\n        returns (bool supported) {\r\n            // Contracts support ERC-165\r\n            require(supported, \"not erc 721 contract\");\r\n        } catch (bytes memory /*lowLevelData*/) {\r\n            // Contracts doesn't support ERC-165\r\n            revert(\"doesn't support ERC-165\");\r\n        }\r\n\r\n        IERC721 nft = IERC721(_nftAddress);\r\n        require(\r\n            nft.isApprovedForAll(msg.sender, address(this)) ||\r\n                nft.getApproved(_tokenId) == address(this),\r\n            \"not approved for marketplace\"\r\n        );\r\n        require(_price > 0, \"price cannot be zero\");\r\n\r\n        listedItems[_nftAddress][_tokenId] = Listing(msg.sender, _price, false);\r\n\r\n        emit ItemListed(msg.sender, _nftAddress, _tokenId, _price);\r\n    }\r\n\r\n    ///@notice update the listing price\r\n    /// @dev only admin\r\n    /// @dev only if it's listed for sale\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    /// @param _newPrice new price to update listing\r\n    function updateListing(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _newPrice\r\n    ) public isNftOwner(_nftAddress, _tokenId) isListed(_nftAddress, _tokenId) {\r\n        require(_newPrice > 0, \"price cannot be less than zero\");\r\n        Listing storage listing = listedItems[_nftAddress][_tokenId];\r\n        listing.price = _newPrice;\r\n\r\n        emit ItemUpdated(msg.sender, _nftAddress, _tokenId, _newPrice);\r\n    }\r\n\r\n    /// @notice cancel listed nft\r\n    /// @dev only admin\r\n    /// @dev only if it's listed for sale\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    function cancelListing(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) public isNftOwner(_nftAddress, _tokenId) isListed(_nftAddress, _tokenId) {\r\n        delete (listedItems[_nftAddress][_tokenId]);\r\n        emit ItemCanceled(msg.sender, _nftAddress, _tokenId);\r\n    }\r\n\r\n    /// @notice for buying an item from marketplace\r\n    /// @dev only if it's listed for sale\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    function buyItem(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) public payable isListed(_nftAddress, _tokenId) {\r\n        Listing memory listing = listedItems[_nftAddress][_tokenId];\r\n\r\n        require(\r\n            msg.value >= listing.price,\r\n            \"insufficient funds for buying nft\"\r\n        );\r\n\r\n        IAuction auction = IAuction(addressRegistry.auction());\r\n        (, , uint256 startTime, , bool result) = auction.auctions(\r\n            _nftAddress,\r\n            _tokenId\r\n        );\r\n        require(\r\n            startTime == 0 || result == true,\r\n            \"cannot buy an item when auction is going on\"\r\n        );\r\n        // calculate the fee\r\n        uint256 feeAmount;\r\n\r\n        feeAmount = (msg.value * platformFee) / 1000;\r\n\r\n        (bool feeSuccess, ) = feeRecipient.call{value: feeAmount}(\"\");\r\n        require(feeSuccess, \"transfer failed for paying tax\");\r\n\r\n        // sending royalty fee to owner if collection supports ERC2981 standard\r\n        if (\r\n            IERC165(_nftAddress).supportsInterface(type(IERC2981).interfaceId)\r\n        ) {\r\n            (address receiver, uint256 royaltyFee) = IERC2981(_nftAddress)\r\n                .royaltyInfo(_tokenId, msg.value);\r\n\r\n            (bool royaltySuccess, ) = payable(receiver).call{value: royaltyFee}(\r\n                \"\"\r\n            );\r\n            require(royaltySuccess, \"failed to transfer the royalty\");\r\n            feeAmount += royaltyFee;\r\n        }\r\n\r\n        (bool sellerSuccess, ) = payable(listing.owner).call{\r\n            value: msg.value - feeAmount\r\n        }(\"\");\r\n        require(sellerSuccess, \"transfer failed for nft owner\");\r\n        delete (listedItems[_nftAddress][_tokenId]);\r\n\r\n        IERC721(_nftAddress).safeTransferFrom(\r\n            listing.owner,\r\n            msg.sender,\r\n            _tokenId\r\n        );\r\n        emit ItemSold(\r\n            listing.owner,\r\n            msg.sender,\r\n            _nftAddress,\r\n            _tokenId,\r\n            listing.price\r\n        );\r\n    }\r\n\r\n    /// @notice method for offering item\r\n    /// @dev only if it's listed for sale\r\n    /// @dev converted into two functions because of (stack too deep error)\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    /// @param _wethAmount amount in weth token\r\n    /// @param _expiration offers expiration date\r\n    function createOffer(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _wethAmount,\r\n        uint256 _expiration\r\n    )\r\n        public\r\n        isListed(_nftAddress, _tokenId)\r\n        offerNotExist(_nftAddress, _tokenId, msg.sender)\r\n    {\r\n        require(_wethAmount > 0, \"your offer cannot be 0\");\r\n        require(_expiration > _getNow(), \"invalid expiration\");\r\n        // check allowance amount for contract to move tokens\r\n        address wethAddress = addressRegistry.WETH();\r\n        require(\r\n            IERC20(wethAddress).allowance(msg.sender, address(this)) >=\r\n                _wethAmount,\r\n            \"Insufficient WETH allowance\"\r\n        );\r\n\r\n        _createOffer(\r\n            _nftAddress,\r\n            _tokenId,\r\n            _wethAmount,\r\n            msg.sender,\r\n            _expiration\r\n        );\r\n    }\r\n\r\n    /// @notice method for canceling existing offer\r\n    /// @dev only if offer exist\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    function cancelOffer(\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) public offerExist(_nftAddress, _tokenId, msg.sender) {\r\n        delete (offers[_nftAddress][_tokenId][msg.sender]);\r\n        emit OfferCanceled(msg.sender, _nftAddress, _tokenId);\r\n    }\r\n\r\n    /// @notice method for accepting offer\r\n    /// @dev only nft admin\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    /// @param _creator offer creator address\r\n    function acceptOffer(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _creator\r\n    )\r\n        public\r\n        nonReentrant\r\n        isNftOwner(_nftAddress, _tokenId)\r\n        offerExist(_nftAddress, _tokenId, _creator)\r\n    {\r\n        _acceptOffer(_nftAddress, _tokenId, _creator);\r\n    }\r\n\r\n    /// @notice updates the platform fee\r\n    /// @dev only admin\r\n    /// @param _platformFee new platform fee to set\r\n    function updatePlatformFee(uint16 _platformFee) public onlyOwner {\r\n        platformFee = _platformFee;\r\n        emit UpdatedPlatformFee(_platformFee);\r\n    }\r\n\r\n    /// @notice updates the fee recipient\r\n    /// @dev only admin\r\n    /// @param _feeRecipient new fee recipient to receive platform fee\r\n    function updateFeeRecipient(\r\n        address payable _feeRecipient\r\n    ) public onlyOwner {\r\n        require(_feeRecipient != address(0), \"recipient cannot be empty\");\r\n\r\n        feeRecipient = _feeRecipient;\r\n        emit UpdatedFeeRecipient(_feeRecipient);\r\n    }\r\n\r\n    /**\r\n     @notice update address registry\r\n     @dev only admin\r\n     @param _newAddress new address\r\n     */\r\n    function updateAddressRegistry(address _newAddress) public onlyOwner {\r\n        addressRegistry = IAddressRegistry(_newAddress);\r\n    }\r\n\r\n    function _getNow() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /// @notice method for transfer and cancel nft listing\r\n    /// @dev only auction contract can call this function\r\n    /// @param _nftAddress nft contract address\r\n    /// @param _tokenId nft token id\r\n    /// @param _winner nft token id\r\n    function transferNFTtoAuctionWinner(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _winner\r\n    ) external isListed(_nftAddress, _tokenId) {\r\n        require(\r\n            msg.sender == addressRegistry.auction(),\r\n            \"only auction contract can call this\"\r\n        );\r\n\r\n        // delete listing\r\n        delete (listedItems[_nftAddress][_tokenId]);\r\n\r\n        // send nft to auction winner\r\n        IERC721 nft = IERC721(_nftAddress);\r\n        nft.safeTransferFrom(nft.ownerOf(_tokenId), _winner, _tokenId);\r\n    }\r\n\r\n    function _acceptOffer(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _creator\r\n    ) private {\r\n        Offer memory targetOffer = offers[_nftAddress][_tokenId][_creator];\r\n\r\n        address wethAddress = addressRegistry.WETH();\r\n        uint256 feeAmount;\r\n\r\n        feeAmount = (targetOffer.offer * platformFee) / 1000;\r\n        require(\r\n            IERC20(wethAddress).transferFrom(_creator, feeRecipient, feeAmount),\r\n            \"WETH transfer failed\"\r\n        );\r\n\r\n        // sending royalty fee to owner if collection supports ERC2981 standard\r\n        if (\r\n            IERC165(_nftAddress).supportsInterface(type(IERC2981).interfaceId)\r\n        ) {\r\n            (address receiver, uint256 royaltyFee) = IERC2981(_nftAddress)\r\n                .royaltyInfo(_tokenId, targetOffer.offer);\r\n\r\n            require(\r\n                IERC20(wethAddress).transferFrom(\r\n                    _creator,\r\n                    receiver,\r\n                    royaltyFee\r\n                ),\r\n                \"WETH transfer failed\"\r\n            );\r\n\r\n            feeAmount += royaltyFee;\r\n        }\r\n\r\n        require(\r\n            IERC20(wethAddress).transferFrom(\r\n                _creator,\r\n                msg.sender,\r\n                targetOffer.offer - feeAmount\r\n            ),\r\n            \"WETH transfer failed\"\r\n        );\r\n\r\n        delete (offers[_nftAddress][_tokenId][_creator]);\r\n        delete (listedItems[_nftAddress][_tokenId]);\r\n\r\n        IERC721(_nftAddress).safeTransferFrom(msg.sender, _creator, _tokenId);\r\n\r\n        emit ItemSold(\r\n            msg.sender,\r\n            _creator,\r\n            _nftAddress,\r\n            _tokenId,\r\n            targetOffer.offer\r\n        );\r\n        emit OfferCanceled(_creator, _nftAddress, _tokenId);\r\n    }\r\n\r\n    /// @dev if auction exist offer cannot be created\r\n    function _createOffer(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _wethAmount,\r\n        address _creator,\r\n        uint256 _expiration\r\n    ) private {\r\n        IAuction auction = IAuction(addressRegistry.auction());\r\n        (, , uint256 startTime, , bool result) = auction.auctions(\r\n            _nftAddress,\r\n            _tokenId\r\n        );\r\n        require(\r\n            startTime == 0 || result == true,\r\n            \"cannot place an offer when auction is going on\"\r\n        );\r\n        offers[_nftAddress][_tokenId][_creator] = Offer(\r\n            _wethAmount,\r\n            _expiration\r\n        );\r\n        emit OfferCreated(msg.sender, _nftAddress, _tokenId, _wethAmount);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}