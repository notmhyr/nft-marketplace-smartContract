{
  "address": "0x1E71213040AE4Cea4e90971186e1A28db8B90023",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionsAddress",
          "type": "address"
        }
      ],
      "name": "CollectionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "platformFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedPlatformFee",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collectionsOwned",
      "outputs": [
        {
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "_royaltyFee",
          "type": "uint16"
        },
        {
          "internalType": "address payable",
          "name": "_collectionFeeRecipient",
          "type": "address"
        }
      ],
      "name": "createCollection",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deployedCollections",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getCollectionsOwned",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collectionAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct NFTFactory.Collection[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "updateFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        }
      ],
      "name": "updatePlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb80974d28999d950f7615513886cf988d1865c71b9e76a7a7a6d9781769c26a8",
  "receipt": {
    "to": null,
    "from": "0xE70f3684db78FA5df985cAF17F0E466646B56ac2",
    "contractAddress": "0x1E71213040AE4Cea4e90971186e1A28db8B90023",
    "transactionIndex": 11,
    "gasUsed": "5219590",
    "logsBloom": "0x
    "blockHash": "0x090db04fc87637f07a75790e6b6b08c1c434635bdfb999a9ff152613a550cf73",
    "transactionHash": "0xb80974d28999d950f7615513886cf988d1865c71b9e76a7a7a6d9781769c26a8",
    "logs": [],
    "blockNumber": 3290690,
    "cumulativeGasUsed": "8420046",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000",
    "0xE70f3684db78FA5df985cAF17F0E466646B56ac2"
  ],
  "numDeployments": 2,
  "solcInputHash": "02b5627585e1846cbd31209ea713cbad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionsAddress\",\"type\":\"address\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"UpdatedFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedPlatformFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectionsOwned\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyFee\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"_collectionFeeRecipient\",\"type\":\"address\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedCollections\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCollectionsOwned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct NFTFactory.Collection[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createCollection(string,string,uint16,address)\":{\"params\":{\"_collectionFeeRecipient\":\"address of fee recipient\",\"_name\":\"collection name\",\"_royaltyFee\":\"collection royalty fee\",\"_symbol\":\"collection symbol\"}},\"updateFeeRecipient(address)\":{\"details\":\"only admin\",\"params\":{\"_feeRecipient\":\"new fee recipient to receive platform fee\"}},\"updatePlatformFee(uint256)\":{\"details\":\"only admin\",\"params\":{\"_platformFee\":\"new platform fee to set\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectionsOwned(address,uint256)\":{\"notice\":\"user address -> collection addresses array\"},\"createCollection(string,string,uint16,address)\":{\"notice\":\"method for creating new collection\"},\"deployedCollections(uint256)\":{\"notice\":\"deployed and available collections array\"},\"feeRecipient()\":{\"notice\":\"fee recipient\"},\"getCollectionsOwned(address)\":{\"notice\":\"method for getting all addresses owned by user\"},\"owner()\":{\"notice\":\"owner of the collection\"},\"platformFee()\":{\"notice\":\"platform fee for each new nft collection\"},\"updateFeeRecipient(address)\":{\"notice\":\"updates the fee recipient\"},\"updatePlatformFee(uint256)\":{\"notice\":\"updates the platform fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTFactory.sol\":\"NFTFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/NFTCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @dev imports\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\n\\r\\ncontract NFTCollection is ERC721URIStorage, ERC2981 {\\r\\n    /// @dev events of the contract\\r\\n    event Minted(\\r\\n        uint256 tokenId,\\r\\n        string tokenURI,\\r\\n        address minter,\\r\\n        string collectionName\\r\\n    );\\r\\n    event UpdatedRoyalty(address feeRecipient, uint96 royaltyFee);\\r\\n\\r\\n    /// @notice owner of the collection\\r\\n    address public immutable owner;\\r\\n    /// @notice token id counter\\r\\n    uint256 public tokenIds;\\r\\n\\r\\n    /// @dev modifiers of contract\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice contract constructor for initializing new collection\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint16 _royaltyFee,\\r\\n        address payable _feeRecipient,\\r\\n        address _owner\\r\\n    ) ERC721(name, symbol) {\\r\\n        owner = _owner;\\r\\n\\r\\n        // setting royalty fee on collection with eip 2981 standard\\r\\n        _setDefaultRoyalty(_feeRecipient, _royaltyFee);\\r\\n    }\\r\\n\\r\\n    function mint(string memory _tokenURI) public onlyOwner returns (uint256) {\\r\\n        require(bytes(_tokenURI).length > 0, \\\"no token uri\\\");\\r\\n\\r\\n        uint256 newTokenId = tokenIds += 1;\\r\\n        _safeMint(msg.sender, newTokenId);\\r\\n        _setTokenURI(newTokenId, _tokenURI);\\r\\n        emit Minted(newTokenId, _tokenURI, msg.sender, name());\\r\\n        return newTokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice updates the royalty status\\r\\n    @dev only admin\\r\\n    @param _feeRecipient new fee recipient to receive platform fee\\r\\n    @param _royaltyFee new royalty fee to set\\r\\n     */\\r\\n    function updateRoyalty(\\r\\n        address _feeRecipient,\\r\\n        uint16 _royaltyFee\\r\\n    ) public onlyOwner {\\r\\n        require(_feeRecipient != address(0), \\\"recipient cannot be empty\\\");\\r\\n        require(_royaltyFee <= 1000, \\\"royalty fee cannot be more than 10%\\\");\\r\\n\\r\\n        _setDefaultRoyalty(_feeRecipient, _royaltyFee);\\r\\n\\r\\n        emit UpdatedRoyalty(_feeRecipient, _royaltyFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Method for removing the royalty\\r\\n     */\\r\\n    function removeRoyalty() public onlyOwner {\\r\\n        _deleteDefaultRoyalty();\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view override(ERC721, ERC2981) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c9ebfe1169b4042f1b16b9b7dbd9b06980e2ade4e2bcb21454c36d9c5e6d458\",\"license\":\"MIT\"},\"contracts/NFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @dev imports\\r\\nimport \\\"./NFTCollection.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\ncontract NFTFactory {\\r\\n    // events\\r\\n    event CollectionCreated(\\r\\n        address indexed owner,\\r\\n        address indexed collectionsAddress\\r\\n    );\\r\\n    event UpdatedPlatformFee(uint256 platformFee);\\r\\n    event UpdatedFeeRecipient(address feeRecipient);\\r\\n\\r\\n    struct Collection {\\r\\n        address collectionAddress;\\r\\n        string name;\\r\\n    }\\r\\n\\r\\n    /// @notice user address -> collection addresses array\\r\\n    mapping(address => Collection[]) public collectionsOwned;\\r\\n\\r\\n    /// @notice owner of the collection\\r\\n    address public immutable owner;\\r\\n    /// @notice fee recipient\\r\\n    address payable public feeRecipient;\\r\\n    /// @notice platform fee for each new nft collection\\r\\n    uint256 public platformFee;\\r\\n    /// @notice deployed and available collections array\\r\\n    address[] public deployedCollections;\\r\\n    /// @notice to check if is valid nft contract\\r\\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n    /// @dev modifiers of contract\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(uint256 _platformFee, address payable _feeRecipient) {\\r\\n        platformFee = _platformFee;\\r\\n        feeRecipient = _feeRecipient;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice method for creating new collection\\r\\n    /// @param _name collection name\\r\\n    /// @param _symbol collection symbol\\r\\n    /// @param _royaltyFee collection royalty fee\\r\\n    /// @param _collectionFeeRecipient address of fee recipient\\r\\n    function createCollection(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint16 _royaltyFee,\\r\\n        address payable _collectionFeeRecipient\\r\\n    ) public payable {\\r\\n        require(msg.value >= platformFee, \\\"not enough funds\\\");\\r\\n        require(_royaltyFee <= 1000, \\\"max royalty fee is 10 percent\\\"); // 1000 = 10%\\r\\n\\r\\n        (bool success, ) = feeRecipient.call{value: msg.value}(\\\"\\\");\\r\\n        require(success, \\\"transfer failed\\\");\\r\\n\\r\\n        // deploying new collection and passing the args\\r\\n        NFTCollection newCollection = new NFTCollection(\\r\\n            _name,\\r\\n            _symbol,\\r\\n            _royaltyFee,\\r\\n            _collectionFeeRecipient,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        deployedCollections.push(address(newCollection));\\r\\n        collectionsOwned[msg.sender].push(\\r\\n            Collection(address(newCollection), _name)\\r\\n        );\\r\\n\\r\\n        emit CollectionCreated(msg.sender, address(newCollection));\\r\\n    }\\r\\n\\r\\n    /// @notice updates the platform fee\\r\\n    /// @dev only admin\\r\\n    /// @param _platformFee new platform fee to set\\r\\n    function updatePlatformFee(uint256 _platformFee) public onlyOwner {\\r\\n        platformFee = _platformFee;\\r\\n        emit UpdatedPlatformFee(_platformFee);\\r\\n    }\\r\\n\\r\\n    /// @notice updates the fee recipient\\r\\n    /// @dev only admin\\r\\n    /// @param _feeRecipient new fee recipient to receive platform fee\\r\\n    function updateFeeRecipient(\\r\\n        address payable _feeRecipient\\r\\n    ) public onlyOwner {\\r\\n        require(_feeRecipient != address(0), \\\"recipient cannot be empty\\\");\\r\\n\\r\\n        feeRecipient = _feeRecipient;\\r\\n        emit UpdatedFeeRecipient(_feeRecipient);\\r\\n    }\\r\\n\\r\\n    /// @notice method for getting all addresses owned by user\\r\\n    function getCollectionsOwned(\\r\\n        address user\\r\\n    ) public view returns (Collection[] memory) {\\r\\n        return collectionsOwned[user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5caaabac83d28ea7de36fdb098f74c6906e7e9d521d287e68ef75167c067bd16\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162005edd38038062005edd833981810160405281019062000037919062000160565b8160028190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050620001a7565b600080fd5b6000819050919050565b620000d581620000c0565b8114620000e157600080fd5b50565b600081519050620000f581620000ca565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012882620000fb565b9050919050565b6200013a816200011b565b81146200014657600080fd5b50565b6000815190506200015a816200012f565b92915050565b600080604083850312156200017a5762000179620000bb565b5b60006200018a85828601620000e4565b92505060206200019d8582860162000149565b9150509250929050565b608051615d0c620001d1600039600081816107d3015281816107f701526109bd0152615d0c6000f3fe608060405260043610620000925760003560e01c80636cfab6fa11620000615780636cfab6fa146200017f5780638da5cb5b146200019f578063aa0b598814620001cf578063df097c3714620001fd578063f160d36914620002425762000092565b806326232a2e146200009757806331d9b40914620000c757806346904840146200010b578063654258c9146200013b575b600080fd5b348015620000a457600080fd5b50620000af62000270565b604051620000be919062000b64565b60405180910390f35b348015620000d457600080fd5b50620000f36004803603810190620000ed919062000bc6565b62000276565b60405162000102919062000c3d565b60405180910390f35b3480156200011857600080fd5b5062000123620002b6565b60405162000132919062000c7f565b60405180910390f35b3480156200014857600080fd5b5062000167600480360381019062000161919062000ccd565b620002dc565b60405162000176919062000ebb565b60405180910390f35b6200019d6004803603810190620001979190620010a0565b6200046b565b005b348015620001ac57600080fd5b50620001b7620007d1565b604051620001c6919062000c3d565b60405180910390f35b348015620001dc57600080fd5b50620001fb6004803603810190620001f5919062000bc6565b620007f5565b005b3480156200020a57600080fd5b5062000229600480360381019062000223919062001150565b620008c9565b60405162000239929190620011e9565b60405180910390f35b3480156200024f57600080fd5b506200026e60048036038101906200026891906200121d565b620009bb565b005b60025481565b600381815481106200028757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156200046057838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054620003c8906200127e565b80601f0160208091040260200160405190810160405280929190818152602001828054620003f6906200127e565b8015620004475780601f106200041b5761010080835404028352916020019162000447565b820191906000526020600020905b8154815290600101906020018083116200042957829003601f168201915b505050505081525050815260200190600101906200033c565b505050509050919050565b600254341015620004b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004aa9062001303565b60405180910390fd5b6103e88261ffff161115620004ff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004f69062001375565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16346040516200054990620013cc565b60006040518083038185875af1925050503d806000811462000588576040519150601f19603f3d011682016040523d82523d6000602084013e6200058d565b606091505b5050905080620005d4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005cb9062001433565b60405180910390fd5b60008585858533604051620005e99062000b3b565b620005f995949392919062001466565b604051809103906000f08015801562000616573d6000803e3d6000fd5b5090506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200188815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816200076c9190620016a3565b5050508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5d0de243db1669e3a7056744cd715c625f0c1c348736c2c2d53d0ddebff1a6c760405160405180910390a3505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000886576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200087d90620017da565b60405180910390fd5b806002819055507fb4ee35d3791fd507133941d1485f27249924ba5099826ec5c029474fbbdb2cc681604051620008be919062000b64565b60405180910390a150565b60006020528160005260406000208181548110620008e657600080fd5b9060005260206000209060020201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805462000932906200127e565b80601f016020809104026020016040519081016040528092919081815260200182805462000960906200127e565b8015620009b15780601f106200098557610100808354040283529160200191620009b1565b820191906000526020600020905b8154815290600101906020018083116200099357829003601f168201915b5050505050905082565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a4390620017da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000abe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ab5906200184c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbf5406678e9fe702eaea01d92d3b62ac5be0a14e1802562e2a428364d30d1b118160405162000b309190620018cf565b60405180910390a150565b6143ea80620018ed83390190565b6000819050919050565b62000b5e8162000b49565b82525050565b600060208201905062000b7b600083018462000b53565b92915050565b6000604051905090565b600080fd5b600080fd5b62000ba08162000b49565b811462000bac57600080fd5b50565b60008135905062000bc08162000b95565b92915050565b60006020828403121562000bdf5762000bde62000b8b565b5b600062000bef8482850162000baf565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000c258262000bf8565b9050919050565b62000c378162000c18565b82525050565b600060208201905062000c54600083018462000c2c565b92915050565b600062000c678262000bf8565b9050919050565b62000c798162000c5a565b82525050565b600060208201905062000c96600083018462000c6e565b92915050565b62000ca78162000c18565b811462000cb357600080fd5b50565b60008135905062000cc78162000c9c565b92915050565b60006020828403121562000ce65762000ce562000b8b565b5b600062000cf68482850162000cb6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000d368162000c18565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000d7857808201518184015260208101905062000d5b565b60008484015250505050565b6000601f19601f8301169050919050565b600062000da28262000d3c565b62000dae818562000d47565b935062000dc081856020860162000d58565b62000dcb8162000d84565b840191505092915050565b600060408301600083015162000df0600086018262000d2b565b506020830151848203602086015262000e0a828262000d95565b9150508091505092915050565b600062000e25838362000dd6565b905092915050565b6000602082019050919050565b600062000e478262000cff565b62000e53818562000d0a565b93508360208202850162000e678562000d1b565b8060005b8581101562000ea9578484038952815162000e87858262000e17565b945062000e948362000e2d565b925060208a0199505060018101905062000e6b565b50829750879550505050505092915050565b6000602082019050818103600083015262000ed7818462000e3a565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000f238262000d84565b810181811067ffffffffffffffff8211171562000f455762000f4462000ee9565b5b80604052505050565b600062000f5a62000b81565b905062000f68828262000f18565b919050565b600067ffffffffffffffff82111562000f8b5762000f8a62000ee9565b5b62000f968262000d84565b9050602081019050919050565b82818337600083830152505050565b600062000fc962000fc38462000f6d565b62000f4e565b90508281526020810184848401111562000fe85762000fe762000ee4565b5b62000ff584828562000fa3565b509392505050565b600082601f83011262001015576200101462000edf565b5b81356200102784826020860162000fb2565b91505092915050565b600061ffff82169050919050565b620010498162001030565b81146200105557600080fd5b50565b60008135905062001069816200103e565b92915050565b6200107a8162000c5a565b81146200108657600080fd5b50565b6000813590506200109a816200106f565b92915050565b60008060008060808587031215620010bd57620010bc62000b8b565b5b600085013567ffffffffffffffff811115620010de57620010dd62000b90565b5b620010ec8782880162000ffd565b945050602085013567ffffffffffffffff81111562001110576200110f62000b90565b5b6200111e8782880162000ffd565b9350506040620011318782880162001058565b9250506060620011448782880162001089565b91505092959194509250565b600080604083850312156200116a576200116962000b8b565b5b60006200117a8582860162000cb6565b92505060206200118d8582860162000baf565b9150509250929050565b600082825260208201905092915050565b6000620011b58262000d3c565b620011c1818562001197565b9350620011d381856020860162000d58565b620011de8162000d84565b840191505092915050565b600060408201905062001200600083018562000c2c565b8181036020830152620012148184620011a8565b90509392505050565b60006020828403121562001236576200123562000b8b565b5b6000620012468482850162001089565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200129757607f821691505b602082108103620012ad57620012ac6200124f565b5b50919050565b7f6e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b6000620012eb60108362001197565b9150620012f882620012b3565b602082019050919050565b600060208201905081810360008301526200131e81620012dc565b9050919050565b7f6d617820726f79616c7479206665652069732031302070657263656e74000000600082015250565b60006200135d601d8362001197565b91506200136a8262001325565b602082019050919050565b6000602082019050818103600083015262001390816200134e565b9050919050565b600081905092915050565b50565b6000620013b460008362001397565b9150620013c182620013a2565b600082019050919050565b6000620013d982620013a5565b9150819050919050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006200141b600f8362001197565b91506200142882620013e3565b602082019050919050565b600060208201905081810360008301526200144e816200140c565b9050919050565b620014608162001030565b82525050565b600060a0820190508181036000830152620014828188620011a8565b90508181036020830152620014988187620011a8565b9050620014a9604083018662001455565b620014b8606083018562000c6e565b620014c7608083018462000c2c565b9695505050505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620015357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620014f6565b620015418683620014f6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620015846200157e620015788462000b49565b62001559565b62000b49565b9050919050565b6000819050919050565b620015a08362001563565b620015b8620015af826200158b565b84845462001503565b825550505050565b600090565b620015cf620015c0565b620015dc81848462001595565b505050565b5b818110156200160457620015f8600082620015c5565b600181019050620015e2565b5050565b601f82111562001653576200161d81620014d1565b6200162884620014e6565b8101602085101562001638578190505b620016506200164785620014e6565b830182620015e1565b50505b505050565b600082821c905092915050565b6000620016786000198460080262001658565b1980831691505092915050565b600062001693838362001665565b9150826002028217905092915050565b620016ae8262000d3c565b67ffffffffffffffff811115620016ca57620016c962000ee9565b5b620016d682546200127e565b620016e382828562001608565b600060209050601f8311600181146200171b576000841562001706578287015190505b62001712858262001685565b86555062001782565b601f1984166200172b86620014d1565b60005b8281101562001755578489015182556001820191506020850194506020810190506200172e565b8683101562001775578489015162001771601f89168262001665565b8355505b6001600288020188555050505b505050505050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000620017c260098362001197565b9150620017cf826200178a565b602082019050919050565b60006020820190508181036000830152620017f581620017b3565b9050919050565b7f726563697069656e742063616e6e6f7420626520656d70747900000000000000600082015250565b60006200183460198362001197565b91506200184182620017fc565b602082019050919050565b60006020820190508181036000830152620018678162001825565b9050919050565b60006200188f62001889620018838462000bf8565b62001559565b62000bf8565b9050919050565b6000620018a3826200186e565b9050919050565b6000620018b78262001896565b9050919050565b620018c981620018aa565b82525050565b6000602082019050620018e66000830184620018be565b9291505056fe60a06040523480156200001157600080fd5b50604051620043ea380380620043ea8339818101604052810190620000379190620004dd565b848481600090816200004a9190620007ee565b5080600190816200005c9190620007ee565b5050508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000a9828461ffff16620000b460201b60201c565b5050505050620009f0565b620000c46200025760201b60201c565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff16111562000125576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200011c906200095c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000197576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200018e90620009ce565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff16815250600760008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050505050565b6000612710905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002ca826200027f565b810181811067ffffffffffffffff82111715620002ec57620002eb62000290565b5b80604052505050565b60006200030162000261565b90506200030f8282620002bf565b919050565b600067ffffffffffffffff82111562000332576200033162000290565b5b6200033d826200027f565b9050602081019050919050565b60005b838110156200036a5780820151818401526020810190506200034d565b60008484015250505050565b60006200038d620003878462000314565b620002f5565b905082815260208101848484011115620003ac57620003ab6200027a565b5b620003b98482856200034a565b509392505050565b600082601f830112620003d957620003d862000275565b5b8151620003eb84826020860162000376565b91505092915050565b600061ffff82169050919050565b6200040d81620003f4565b81146200041957600080fd5b50565b6000815190506200042d8162000402565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004608262000433565b9050919050565b620004728162000453565b81146200047e57600080fd5b50565b600081519050620004928162000467565b92915050565b6000620004a58262000433565b9050919050565b620004b78162000498565b8114620004c357600080fd5b50565b600081519050620004d781620004ac565b92915050565b600080600080600060a08688031215620004fc57620004fb6200026b565b5b600086015167ffffffffffffffff8111156200051d576200051c62000270565b5b6200052b88828901620003c1565b955050602086015167ffffffffffffffff8111156200054f576200054e62000270565b5b6200055d88828901620003c1565b945050604062000570888289016200041c565b9350506060620005838882890162000481565b92505060806200059688828901620004c6565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005f657607f821691505b6020821081036200060c576200060b620005ae565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006767fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000637565b62000682868362000637565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620006cf620006c9620006c3846200069a565b620006a4565b6200069a565b9050919050565b6000819050919050565b620006eb83620006ae565b62000703620006fa82620006d6565b84845462000644565b825550505050565b600090565b6200071a6200070b565b62000727818484620006e0565b505050565b5b818110156200074f576200074360008262000710565b6001810190506200072d565b5050565b601f8211156200079e57620007688162000612565b620007738462000627565b8101602085101562000783578190505b6200079b620007928562000627565b8301826200072c565b50505b505050565b600082821c905092915050565b6000620007c360001984600802620007a3565b1980831691505092915050565b6000620007de8383620007b0565b9150826002028217905092915050565b620007f982620005a3565b67ffffffffffffffff81111562000815576200081462000290565b5b620008218254620005dd565b6200082e82828562000753565b600060209050601f83116001811462000866576000841562000851578287015190505b6200085d8582620007d0565b865550620008cd565b601f198416620008768662000612565b60005b82811015620008a05784890151825560018201915060208501945060208101905062000879565b86831015620008c05784890151620008bc601f891682620007b0565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b600062000944602a83620008d5565b91506200095182620008e6565b604082019050919050565b60006020820190508181036000830152620009778162000935565b9050919050565b7f455243323938313a20696e76616c696420726563656976657200000000000000600082015250565b6000620009b6601983620008d5565b9150620009c3826200097e565b602082019050919050565b60006020820190508181036000830152620009e981620009a7565b9050919050565b6080516139c962000a216000396000818161098101528181610a1901528181610c5b0152610e3f01526139c96000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063714cff56116100ad578063b88d4fde11610071578063b88d4fde14610309578063c87b56dd14610325578063d85d3d2714610355578063e985e9c514610385578063ebdf0919146103b557610121565b8063714cff56146102895780638be02eb0146102a75780638da5cb5b146102b157806395d89b41146102cf578063a22cb465146102ed57610121565b806323b872dd116100f457806323b872dd146101c05780632a55205a146101dc57806342842e0e1461020d5780636352211e1461022957806370a082311461025957610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190612345565b6103d1565b60405161014d919061238d565b60405180910390f35b61015e6103e3565b60405161016b9190612438565b60405180910390f35b61018e60048036038101906101899190612490565b610475565b60405161019b91906124fe565b60405180910390f35b6101be60048036038101906101b99190612545565b6104bb565b005b6101da60048036038101906101d59190612585565b6105d2565b005b6101f660048036038101906101f191906125d8565b610632565b604051610204929190612627565b60405180910390f35b61022760048036038101906102229190612585565b61081c565b005b610243600480360381019061023e9190612490565b61083c565b60405161025091906124fe565b60405180910390f35b610273600480360381019061026e9190612650565b6108c2565b604051610280919061267d565b60405180910390f35b610291610979565b60405161029e919061267d565b60405180910390f35b6102af61097f565b005b6102b9610a17565b6040516102c691906124fe565b60405180910390f35b6102d7610a3b565b6040516102e49190612438565b60405180910390f35b610307600480360381019061030291906126c4565b610acd565b005b610323600480360381019061031e9190612839565b610ae3565b005b61033f600480360381019061033a9190612490565b610b45565b60405161034c9190612438565b60405180910390f35b61036f600480360381019061036a919061295d565b610c57565b60405161037c919061267d565b60405180910390f35b61039f600480360381019061039a91906129a6565b610da9565b6040516103ac919061238d565b60405180910390f35b6103cf60048036038101906103ca9190612a20565b610e3d565b005b60006103dc82610fce565b9050919050565b6060600080546103f290612a8f565b80601f016020809104026020016040519081016040528092919081815260200182805461041e90612a8f565b801561046b5780601f106104405761010080835404028352916020019161046b565b820191906000526020600020905b81548152906001019060200180831161044e57829003601f168201915b5050505050905090565b600061048082611048565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104c68261083c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052d90612b32565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610555611093565b73ffffffffffffffffffffffffffffffffffffffff16148061058457506105838161057e611093565b610da9565b5b6105c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ba90612bc4565b60405180910390fd5b6105cd838361109b565b505050565b6105e36105dd611093565b82611154565b610622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061990612c56565b60405180910390fd5b61062d8383836111e9565b505050565b6000806000600860008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036107c75760076040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090505b60006107d16114e2565b6bffffffffffffffffffffffff1682602001516bffffffffffffffffffffffff16866107fd9190612ca5565b6108079190612d16565b90508160000151819350935050509250929050565b61083783838360405180602001604052806000815250610ae3565b505050565b600080610848836114ec565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090612d93565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610932576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092990612e25565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60095481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0490612e91565b60405180910390fd5b610a15611529565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060018054610a4a90612a8f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7690612a8f565b8015610ac35780601f10610a9857610100808354040283529160200191610ac3565b820191906000526020600020905b815481529060010190602001808311610aa657829003601f168201915b5050505050905090565b610adf610ad8611093565b8383611576565b5050565b610af4610aee611093565b83611154565b610b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2a90612c56565b60405180910390fd5b610b3f848484846116e2565b50505050565b6060610b5082611048565b6000600660008481526020019081526020016000208054610b7090612a8f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9c90612a8f565b8015610be95780601f10610bbe57610100808354040283529160200191610be9565b820191906000526020600020905b815481529060010190602001808311610bcc57829003601f168201915b505050505090506000610bfa61173e565b90506000815103610c0f578192505050610c52565b600082511115610c44578082604051602001610c2c929190612eed565b60405160208183030381529060405292505050610c52565b610c4d84611755565b925050505b919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ce7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cde90612e91565b60405180910390fd5b6000825111610d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2290612f5d565b60405180910390fd5b6000600160096000828254610d409190612f7d565b9250508190559050610d5233826117bd565b610d5c81846117db565b7f1c15becec49ef0b92b749e7df116e7023bce1f3ae6f98bf165bd99dec5291f6c818433610d886103e3565b604051610d989493929190612fb1565b60405180910390a180915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ecb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec290612e91565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3190613050565b60405180910390fd5b6103e88161ffff161115610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a906130e2565b60405180910390fd5b610f91828261ffff16611848565b7fd556b9ecb33560a77e60c535c70ecdf5eceb082cda7c41818efb18d40ed3493f8282604051610fc2929190613155565b60405180910390a15050565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110415750611040826119dd565b5b9050919050565b61105181611abf565b611090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108790612d93565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661110e8361083c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111608361083c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806111a257506111a18185610da9565b5b806111e057508373ffffffffffffffffffffffffffffffffffffffff166111c884610475565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112098261083c565b73ffffffffffffffffffffffffffffffffffffffff161461125f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611256906131f0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c590613282565b60405180910390fd5b6112db8383836001611b00565b8273ffffffffffffffffffffffffffffffffffffffff166112fb8261083c565b73ffffffffffffffffffffffffffffffffffffffff1614611351576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611348906131f0565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114dd8383836001611c26565b505050565b6000612710905090565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6007600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff02191690555050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115db906132ee565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116d5919061238d565b60405180910390a3505050565b6116ed8484846111e9565b6116f984848484611c2c565b611738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172f90613380565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061176082611048565b600061176a61173e565b9050600081511161178a57604051806020016040528060008152506117b5565b8061179484611db3565b6040516020016117a5929190612eed565b6040516020818303038152906040525b915050919050565b6117d7828260405180602001604052806000815250611e81565b5050565b6117e482611abf565b611823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181a90613412565b60405180910390fd5b8060066000848152602001908152602001600020908161184391906135d4565b505050565b6118506114e2565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff1611156118ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a590613718565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361191d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191490613784565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff16815250600760008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611aa857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611ab85750611ab782611edc565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611ae1836114ec565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115611c2057600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611b945780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b8c91906137a4565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c1f5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c179190612f7d565b925050819055505b5b50505050565b50505050565b6000611c4d8473ffffffffffffffffffffffffffffffffffffffff16611f46565b15611da6578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c76611093565b8786866040518563ffffffff1660e01b8152600401611c98949392919061382d565b6020604051808303816000875af1925050508015611cd457506040513d601f19601f82011682018060405250810190611cd1919061388e565b60015b611d56573d8060008114611d04576040519150601f19603f3d011682016040523d82523d6000602084013e611d09565b606091505b506000815103611d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4590613380565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611dab565b600190505b949350505050565b606060006001611dc284611f69565b01905060008167ffffffffffffffff811115611de157611de061270e565b5b6040519080825280601f01601f191660200182016040528015611e135781602001600182028036833780820191505090505b509050600082602001820190505b600115611e76578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611e6a57611e69612ce7565b5b04945060008503611e21575b819350505050919050565b611e8b83836120bc565b611e986000848484611c2c565b611ed7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ece90613380565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611fc7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611fbd57611fbc612ce7565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612004576d04ee2d6d415b85acef81000000008381611ffa57611ff9612ce7565b5b0492506020810190505b662386f26fc10000831061203357662386f26fc10000838161202957612028612ce7565b5b0492506010810190505b6305f5e100831061205c576305f5e100838161205257612051612ce7565b5b0492506008810190505b612710831061208157612710838161207757612076612ce7565b5b0492506004810190505b606483106120a4576064838161209a57612099612ce7565b5b0492506002810190505b600a83106120b3576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361212b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212290613907565b60405180910390fd5b61213481611abf565b15612174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216b90613973565b60405180910390fd5b612182600083836001611b00565b61218b81611abf565b156121cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c290613973565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122d5600083836001611c26565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612322816122ed565b811461232d57600080fd5b50565b60008135905061233f81612319565b92915050565b60006020828403121561235b5761235a6122e3565b5b600061236984828501612330565b91505092915050565b60008115159050919050565b61238781612372565b82525050565b60006020820190506123a2600083018461237e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123e25780820151818401526020810190506123c7565b60008484015250505050565b6000601f19601f8301169050919050565b600061240a826123a8565b61241481856123b3565b93506124248185602086016123c4565b61242d816123ee565b840191505092915050565b6000602082019050818103600083015261245281846123ff565b905092915050565b6000819050919050565b61246d8161245a565b811461247857600080fd5b50565b60008135905061248a81612464565b92915050565b6000602082840312156124a6576124a56122e3565b5b60006124b48482850161247b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124e8826124bd565b9050919050565b6124f8816124dd565b82525050565b600060208201905061251360008301846124ef565b92915050565b612522816124dd565b811461252d57600080fd5b50565b60008135905061253f81612519565b92915050565b6000806040838503121561255c5761255b6122e3565b5b600061256a85828601612530565b925050602061257b8582860161247b565b9150509250929050565b60008060006060848603121561259e5761259d6122e3565b5b60006125ac86828701612530565b93505060206125bd86828701612530565b92505060406125ce8682870161247b565b9150509250925092565b600080604083850312156125ef576125ee6122e3565b5b60006125fd8582860161247b565b925050602061260e8582860161247b565b9150509250929050565b6126218161245a565b82525050565b600060408201905061263c60008301856124ef565b6126496020830184612618565b9392505050565b600060208284031215612666576126656122e3565b5b600061267484828501612530565b91505092915050565b60006020820190506126926000830184612618565b92915050565b6126a181612372565b81146126ac57600080fd5b50565b6000813590506126be81612698565b92915050565b600080604083850312156126db576126da6122e3565b5b60006126e985828601612530565b92505060206126fa858286016126af565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612746826123ee565b810181811067ffffffffffffffff821117156127655761276461270e565b5b80604052505050565b60006127786122d9565b9050612784828261273d565b919050565b600067ffffffffffffffff8211156127a4576127a361270e565b5b6127ad826123ee565b9050602081019050919050565b82818337600083830152505050565b60006127dc6127d784612789565b61276e565b9050828152602081018484840111156127f8576127f7612709565b5b6128038482856127ba565b509392505050565b600082601f8301126128205761281f612704565b5b81356128308482602086016127c9565b91505092915050565b60008060008060808587031215612853576128526122e3565b5b600061286187828801612530565b945050602061287287828801612530565b93505060406128838782880161247b565b925050606085013567ffffffffffffffff8111156128a4576128a36122e8565b5b6128b08782880161280b565b91505092959194509250565b600067ffffffffffffffff8211156128d7576128d661270e565b5b6128e0826123ee565b9050602081019050919050565b60006129006128fb846128bc565b61276e565b90508281526020810184848401111561291c5761291b612709565b5b6129278482856127ba565b509392505050565b600082601f83011261294457612943612704565b5b81356129548482602086016128ed565b91505092915050565b600060208284031215612973576129726122e3565b5b600082013567ffffffffffffffff811115612991576129906122e8565b5b61299d8482850161292f565b91505092915050565b600080604083850312156129bd576129bc6122e3565b5b60006129cb85828601612530565b92505060206129dc85828601612530565b9150509250929050565b600061ffff82169050919050565b6129fd816129e6565b8114612a0857600080fd5b50565b600081359050612a1a816129f4565b92915050565b60008060408385031215612a3757612a366122e3565b5b6000612a4585828601612530565b9250506020612a5685828601612a0b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612aa757607f821691505b602082108103612aba57612ab9612a60565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b1c6021836123b3565b9150612b2782612ac0565b604082019050919050565b60006020820190508181036000830152612b4b81612b0f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612bae603d836123b3565b9150612bb982612b52565b604082019050919050565b60006020820190508181036000830152612bdd81612ba1565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612c40602d836123b3565b9150612c4b82612be4565b604082019050919050565b60006020820190508181036000830152612c6f81612c33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612cb08261245a565b9150612cbb8361245a565b9250828202612cc98161245a565b91508282048414831517612ce057612cdf612c76565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d218261245a565b9150612d2c8361245a565b925082612d3c57612d3b612ce7565b5b828204905092915050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612d7d6018836123b3565b9150612d8882612d47565b602082019050919050565b60006020820190508181036000830152612dac81612d70565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612e0f6029836123b3565b9150612e1a82612db3565b604082019050919050565b60006020820190508181036000830152612e3e81612e02565b9050919050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000612e7b6009836123b3565b9150612e8682612e45565b602082019050919050565b60006020820190508181036000830152612eaa81612e6e565b9050919050565b600081905092915050565b6000612ec7826123a8565b612ed18185612eb1565b9350612ee18185602086016123c4565b80840191505092915050565b6000612ef98285612ebc565b9150612f058284612ebc565b91508190509392505050565b7f6e6f20746f6b656e207572690000000000000000000000000000000000000000600082015250565b6000612f47600c836123b3565b9150612f5282612f11565b602082019050919050565b60006020820190508181036000830152612f7681612f3a565b9050919050565b6000612f888261245a565b9150612f938361245a565b9250828201905080821115612fab57612faa612c76565b5b92915050565b6000608082019050612fc66000830187612618565b8181036020830152612fd881866123ff565b9050612fe760408301856124ef565b8181036060830152612ff981846123ff565b905095945050505050565b7f726563697069656e742063616e6e6f7420626520656d70747900000000000000600082015250565b600061303a6019836123b3565b915061304582613004565b602082019050919050565b600060208201905081810360008301526130698161302d565b9050919050565b7f726f79616c7479206665652063616e6e6f74206265206d6f7265207468616e2060008201527f3130250000000000000000000000000000000000000000000000000000000000602082015250565b60006130cc6023836123b3565b91506130d782613070565b604082019050919050565b600060208201905081810360008301526130fb816130bf565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b6000819050919050565b600061313f61313a613135846129e6565b61311a565b613102565b9050919050565b61314f81613124565b82525050565b600060408201905061316a60008301856124ef565b6131776020830184613146565b9392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006131da6025836123b3565b91506131e58261317e565b604082019050919050565b60006020820190508181036000830152613209816131cd565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061326c6024836123b3565b915061327782613210565b604082019050919050565b6000602082019050818103600083015261329b8161325f565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006132d86019836123b3565b91506132e3826132a2565b602082019050919050565b60006020820190508181036000830152613307816132cb565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061336a6032836123b3565b91506133758261330e565b604082019050919050565b600060208201905081810360008301526133998161335d565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006133fc602e836123b3565b9150613407826133a0565b604082019050919050565b6000602082019050818103600083015261342b816133ef565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026134947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613457565b61349e8683613457565b95508019841693508086168417925050509392505050565b60006134d16134cc6134c78461245a565b61311a565b61245a565b9050919050565b6000819050919050565b6134eb836134b6565b6134ff6134f7826134d8565b848454613464565b825550505050565b600090565b613514613507565b61351f8184846134e2565b505050565b5b818110156135435761353860008261350c565b600181019050613525565b5050565b601f8211156135885761355981613432565b61356284613447565b81016020851015613571578190505b61358561357d85613447565b830182613524565b50505b505050565b600082821c905092915050565b60006135ab6000198460080261358d565b1980831691505092915050565b60006135c4838361359a565b9150826002028217905092915050565b6135dd826123a8565b67ffffffffffffffff8111156135f6576135f561270e565b5b6136008254612a8f565b61360b828285613547565b600060209050601f83116001811461363e576000841561362c578287015190505b61363685826135b8565b86555061369e565b601f19841661364c86613432565b60005b828110156136745784890151825560018201915060208501945060208101905061364f565b86831015613691578489015161368d601f89168261359a565b8355505b6001600288020188555050505b505050505050565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b6000613702602a836123b3565b915061370d826136a6565b604082019050919050565b60006020820190508181036000830152613731816136f5565b9050919050565b7f455243323938313a20696e76616c696420726563656976657200000000000000600082015250565b600061376e6019836123b3565b915061377982613738565b602082019050919050565b6000602082019050818103600083015261379d81613761565b9050919050565b60006137af8261245a565b91506137ba8361245a565b92508282039050818111156137d2576137d1612c76565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006137ff826137d8565b61380981856137e3565b93506138198185602086016123c4565b613822816123ee565b840191505092915050565b600060808201905061384260008301876124ef565b61384f60208301866124ef565b61385c6040830185612618565b818103606083015261386e81846137f4565b905095945050505050565b60008151905061388881612319565b92915050565b6000602082840312156138a4576138a36122e3565b5b60006138b284828501613879565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006138f16020836123b3565b91506138fc826138bb565b602082019050919050565b60006020820190508181036000830152613920816138e4565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061395d601c836123b3565b915061396882613927565b602082019050919050565b6000602082019050818103600083015261398c81613950565b905091905056fea264697066735822122042eeb8818358e8754551568301f1a74c182c668eadae0b3be4098108f91cb11d64736f6c63430008110033a2646970667358221220bd57121693d3310ba61b369efd6bcb6c88f5c7bf5fefb6d3ae59ceeca7b28ceb64736f6c63430008110033",
  "deployedBytecode": "0x608060405260043610620000925760003560e01c80636cfab6fa11620000615780636cfab6fa146200017f5780638da5cb5b146200019f578063aa0b598814620001cf578063df097c3714620001fd578063f160d36914620002425762000092565b806326232a2e146200009757806331d9b40914620000c757806346904840146200010b578063654258c9146200013b575b600080fd5b348015620000a457600080fd5b50620000af62000270565b604051620000be919062000b64565b60405180910390f35b348015620000d457600080fd5b50620000f36004803603810190620000ed919062000bc6565b62000276565b60405162000102919062000c3d565b60405180910390f35b3480156200011857600080fd5b5062000123620002b6565b60405162000132919062000c7f565b60405180910390f35b3480156200014857600080fd5b5062000167600480360381019062000161919062000ccd565b620002dc565b60405162000176919062000ebb565b60405180910390f35b6200019d6004803603810190620001979190620010a0565b6200046b565b005b348015620001ac57600080fd5b50620001b7620007d1565b604051620001c6919062000c3d565b60405180910390f35b348015620001dc57600080fd5b50620001fb6004803603810190620001f5919062000bc6565b620007f5565b005b3480156200020a57600080fd5b5062000229600480360381019062000223919062001150565b620008c9565b60405162000239929190620011e9565b60405180910390f35b3480156200024f57600080fd5b506200026e60048036038101906200026891906200121d565b620009bb565b005b60025481565b600381815481106200028757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156200046057838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054620003c8906200127e565b80601f0160208091040260200160405190810160405280929190818152602001828054620003f6906200127e565b8015620004475780601f106200041b5761010080835404028352916020019162000447565b820191906000526020600020905b8154815290600101906020018083116200042957829003601f168201915b505050505081525050815260200190600101906200033c565b505050509050919050565b600254341015620004b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004aa9062001303565b60405180910390fd5b6103e88261ffff161115620004ff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004f69062001375565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16346040516200054990620013cc565b60006040518083038185875af1925050503d806000811462000588576040519150601f19603f3d011682016040523d82523d6000602084013e6200058d565b606091505b5050905080620005d4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005cb9062001433565b60405180910390fd5b60008585858533604051620005e99062000b3b565b620005f995949392919062001466565b604051809103906000f08015801562000616573d6000803e3d6000fd5b5090506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200188815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816200076c9190620016a3565b5050508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5d0de243db1669e3a7056744cd715c625f0c1c348736c2c2d53d0ddebff1a6c760405160405180910390a3505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000886576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200087d90620017da565b60405180910390fd5b806002819055507fb4ee35d3791fd507133941d1485f27249924ba5099826ec5c029474fbbdb2cc681604051620008be919062000b64565b60405180910390a150565b60006020528160005260406000208181548110620008e657600080fd5b9060005260206000209060020201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805462000932906200127e565b80601f016020809104026020016040519081016040528092919081815260200182805462000960906200127e565b8015620009b15780601f106200098557610100808354040283529160200191620009b1565b820191906000526020600020905b8154815290600101906020018083116200099357829003601f168201915b5050505050905082565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a4390620017da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000abe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ab5906200184c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbf5406678e9fe702eaea01d92d3b62ac5be0a14e1802562e2a428364d30d1b118160405162000b309190620018cf565b60405180910390a150565b6143ea80620018ed83390190565b6000819050919050565b62000b5e8162000b49565b82525050565b600060208201905062000b7b600083018462000b53565b92915050565b6000604051905090565b600080fd5b600080fd5b62000ba08162000b49565b811462000bac57600080fd5b50565b60008135905062000bc08162000b95565b92915050565b60006020828403121562000bdf5762000bde62000b8b565b5b600062000bef8482850162000baf565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000c258262000bf8565b9050919050565b62000c378162000c18565b82525050565b600060208201905062000c54600083018462000c2c565b92915050565b600062000c678262000bf8565b9050919050565b62000c798162000c5a565b82525050565b600060208201905062000c96600083018462000c6e565b92915050565b62000ca78162000c18565b811462000cb357600080fd5b50565b60008135905062000cc78162000c9c565b92915050565b60006020828403121562000ce65762000ce562000b8b565b5b600062000cf68482850162000cb6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000d368162000c18565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000d7857808201518184015260208101905062000d5b565b60008484015250505050565b6000601f19601f8301169050919050565b600062000da28262000d3c565b62000dae818562000d47565b935062000dc081856020860162000d58565b62000dcb8162000d84565b840191505092915050565b600060408301600083015162000df0600086018262000d2b565b506020830151848203602086015262000e0a828262000d95565b9150508091505092915050565b600062000e25838362000dd6565b905092915050565b6000602082019050919050565b600062000e478262000cff565b62000e53818562000d0a565b93508360208202850162000e678562000d1b565b8060005b8581101562000ea9578484038952815162000e87858262000e17565b945062000e948362000e2d565b925060208a0199505060018101905062000e6b565b50829750879550505050505092915050565b6000602082019050818103600083015262000ed7818462000e3a565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000f238262000d84565b810181811067ffffffffffffffff8211171562000f455762000f4462000ee9565b5b80604052505050565b600062000f5a62000b81565b905062000f68828262000f18565b919050565b600067ffffffffffffffff82111562000f8b5762000f8a62000ee9565b5b62000f968262000d84565b9050602081019050919050565b82818337600083830152505050565b600062000fc962000fc38462000f6d565b62000f4e565b90508281526020810184848401111562000fe85762000fe762000ee4565b5b62000ff584828562000fa3565b509392505050565b600082601f83011262001015576200101462000edf565b5b81356200102784826020860162000fb2565b91505092915050565b600061ffff82169050919050565b620010498162001030565b81146200105557600080fd5b50565b60008135905062001069816200103e565b92915050565b6200107a8162000c5a565b81146200108657600080fd5b50565b6000813590506200109a816200106f565b92915050565b60008060008060808587031215620010bd57620010bc62000b8b565b5b600085013567ffffffffffffffff811115620010de57620010dd62000b90565b5b620010ec8782880162000ffd565b945050602085013567ffffffffffffffff81111562001110576200110f62000b90565b5b6200111e8782880162000ffd565b9350506040620011318782880162001058565b9250506060620011448782880162001089565b91505092959194509250565b600080604083850312156200116a576200116962000b8b565b5b60006200117a8582860162000cb6565b92505060206200118d8582860162000baf565b9150509250929050565b600082825260208201905092915050565b6000620011b58262000d3c565b620011c1818562001197565b9350620011d381856020860162000d58565b620011de8162000d84565b840191505092915050565b600060408201905062001200600083018562000c2c565b8181036020830152620012148184620011a8565b90509392505050565b60006020828403121562001236576200123562000b8b565b5b6000620012468482850162001089565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200129757607f821691505b602082108103620012ad57620012ac6200124f565b5b50919050565b7f6e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b6000620012eb60108362001197565b9150620012f882620012b3565b602082019050919050565b600060208201905081810360008301526200131e81620012dc565b9050919050565b7f6d617820726f79616c7479206665652069732031302070657263656e74000000600082015250565b60006200135d601d8362001197565b91506200136a8262001325565b602082019050919050565b6000602082019050818103600083015262001390816200134e565b9050919050565b600081905092915050565b50565b6000620013b460008362001397565b9150620013c182620013a2565b600082019050919050565b6000620013d982620013a5565b9150819050919050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006200141b600f8362001197565b91506200142882620013e3565b602082019050919050565b600060208201905081810360008301526200144e816200140c565b9050919050565b620014608162001030565b82525050565b600060a0820190508181036000830152620014828188620011a8565b90508181036020830152620014988187620011a8565b9050620014a9604083018662001455565b620014b8606083018562000c6e565b620014c7608083018462000c2c565b9695505050505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620015357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620014f6565b620015418683620014f6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620015846200157e620015788462000b49565b62001559565b62000b49565b9050919050565b6000819050919050565b620015a08362001563565b620015b8620015af826200158b565b84845462001503565b825550505050565b600090565b620015cf620015c0565b620015dc81848462001595565b505050565b5b818110156200160457620015f8600082620015c5565b600181019050620015e2565b5050565b601f82111562001653576200161d81620014d1565b6200162884620014e6565b8101602085101562001638578190505b620016506200164785620014e6565b830182620015e1565b50505b505050565b600082821c905092915050565b6000620016786000198460080262001658565b1980831691505092915050565b600062001693838362001665565b9150826002028217905092915050565b620016ae8262000d3c565b67ffffffffffffffff811115620016ca57620016c962000ee9565b5b620016d682546200127e565b620016e382828562001608565b600060209050601f8311600181146200171b576000841562001706578287015190505b62001712858262001685565b86555062001782565b601f1984166200172b86620014d1565b60005b8281101562001755578489015182556001820191506020850194506020810190506200172e565b8683101562001775578489015162001771601f89168262001665565b8355505b6001600288020188555050505b505050505050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000620017c260098362001197565b9150620017cf826200178a565b602082019050919050565b60006020820190508181036000830152620017f581620017b3565b9050919050565b7f726563697069656e742063616e6e6f7420626520656d70747900000000000000600082015250565b60006200183460198362001197565b91506200184182620017fc565b602082019050919050565b60006020820190508181036000830152620018678162001825565b9050919050565b60006200188f62001889620018838462000bf8565b62001559565b62000bf8565b9050919050565b6000620018a3826200186e565b9050919050565b6000620018b78262001896565b9050919050565b620018c981620018aa565b82525050565b6000602082019050620018e66000830184620018be565b9291505056fe60a06040523480156200001157600080fd5b50604051620043ea380380620043ea8339818101604052810190620000379190620004dd565b848481600090816200004a9190620007ee565b5080600190816200005c9190620007ee565b5050508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000a9828461ffff16620000b460201b60201c565b5050505050620009f0565b620000c46200025760201b60201c565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff16111562000125576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200011c906200095c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000197576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200018e90620009ce565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff16815250600760008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050505050565b6000612710905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002ca826200027f565b810181811067ffffffffffffffff82111715620002ec57620002eb62000290565b5b80604052505050565b60006200030162000261565b90506200030f8282620002bf565b919050565b600067ffffffffffffffff82111562000332576200033162000290565b5b6200033d826200027f565b9050602081019050919050565b60005b838110156200036a5780820151818401526020810190506200034d565b60008484015250505050565b60006200038d620003878462000314565b620002f5565b905082815260208101848484011115620003ac57620003ab6200027a565b5b620003b98482856200034a565b509392505050565b600082601f830112620003d957620003d862000275565b5b8151620003eb84826020860162000376565b91505092915050565b600061ffff82169050919050565b6200040d81620003f4565b81146200041957600080fd5b50565b6000815190506200042d8162000402565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004608262000433565b9050919050565b620004728162000453565b81146200047e57600080fd5b50565b600081519050620004928162000467565b92915050565b6000620004a58262000433565b9050919050565b620004b78162000498565b8114620004c357600080fd5b50565b600081519050620004d781620004ac565b92915050565b600080600080600060a08688031215620004fc57620004fb6200026b565b5b600086015167ffffffffffffffff8111156200051d576200051c62000270565b5b6200052b88828901620003c1565b955050602086015167ffffffffffffffff8111156200054f576200054e62000270565b5b6200055d88828901620003c1565b945050604062000570888289016200041c565b9350506060620005838882890162000481565b92505060806200059688828901620004c6565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005f657607f821691505b6020821081036200060c576200060b620005ae565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006767fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000637565b62000682868362000637565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620006cf620006c9620006c3846200069a565b620006a4565b6200069a565b9050919050565b6000819050919050565b620006eb83620006ae565b62000703620006fa82620006d6565b84845462000644565b825550505050565b600090565b6200071a6200070b565b62000727818484620006e0565b505050565b5b818110156200074f576200074360008262000710565b6001810190506200072d565b5050565b601f8211156200079e57620007688162000612565b620007738462000627565b8101602085101562000783578190505b6200079b620007928562000627565b8301826200072c565b50505b505050565b600082821c905092915050565b6000620007c360001984600802620007a3565b1980831691505092915050565b6000620007de8383620007b0565b9150826002028217905092915050565b620007f982620005a3565b67ffffffffffffffff81111562000815576200081462000290565b5b620008218254620005dd565b6200082e82828562000753565b600060209050601f83116001811462000866576000841562000851578287015190505b6200085d8582620007d0565b865550620008cd565b601f198416620008768662000612565b60005b82811015620008a05784890151825560018201915060208501945060208101905062000879565b86831015620008c05784890151620008bc601f891682620007b0565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b600062000944602a83620008d5565b91506200095182620008e6565b604082019050919050565b60006020820190508181036000830152620009778162000935565b9050919050565b7f455243323938313a20696e76616c696420726563656976657200000000000000600082015250565b6000620009b6601983620008d5565b9150620009c3826200097e565b602082019050919050565b60006020820190508181036000830152620009e981620009a7565b9050919050565b6080516139c962000a216000396000818161098101528181610a1901528181610c5b0152610e3f01526139c96000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063714cff56116100ad578063b88d4fde11610071578063b88d4fde14610309578063c87b56dd14610325578063d85d3d2714610355578063e985e9c514610385578063ebdf0919146103b557610121565b8063714cff56146102895780638be02eb0146102a75780638da5cb5b146102b157806395d89b41146102cf578063a22cb465146102ed57610121565b806323b872dd116100f457806323b872dd146101c05780632a55205a146101dc57806342842e0e1461020d5780636352211e1461022957806370a082311461025957610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190612345565b6103d1565b60405161014d919061238d565b60405180910390f35b61015e6103e3565b60405161016b9190612438565b60405180910390f35b61018e60048036038101906101899190612490565b610475565b60405161019b91906124fe565b60405180910390f35b6101be60048036038101906101b99190612545565b6104bb565b005b6101da60048036038101906101d59190612585565b6105d2565b005b6101f660048036038101906101f191906125d8565b610632565b604051610204929190612627565b60405180910390f35b61022760048036038101906102229190612585565b61081c565b005b610243600480360381019061023e9190612490565b61083c565b60405161025091906124fe565b60405180910390f35b610273600480360381019061026e9190612650565b6108c2565b604051610280919061267d565b60405180910390f35b610291610979565b60405161029e919061267d565b60405180910390f35b6102af61097f565b005b6102b9610a17565b6040516102c691906124fe565b60405180910390f35b6102d7610a3b565b6040516102e49190612438565b60405180910390f35b610307600480360381019061030291906126c4565b610acd565b005b610323600480360381019061031e9190612839565b610ae3565b005b61033f600480360381019061033a9190612490565b610b45565b60405161034c9190612438565b60405180910390f35b61036f600480360381019061036a919061295d565b610c57565b60405161037c919061267d565b60405180910390f35b61039f600480360381019061039a91906129a6565b610da9565b6040516103ac919061238d565b60405180910390f35b6103cf60048036038101906103ca9190612a20565b610e3d565b005b60006103dc82610fce565b9050919050565b6060600080546103f290612a8f565b80601f016020809104026020016040519081016040528092919081815260200182805461041e90612a8f565b801561046b5780601f106104405761010080835404028352916020019161046b565b820191906000526020600020905b81548152906001019060200180831161044e57829003601f168201915b5050505050905090565b600061048082611048565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104c68261083c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052d90612b32565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610555611093565b73ffffffffffffffffffffffffffffffffffffffff16148061058457506105838161057e611093565b610da9565b5b6105c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ba90612bc4565b60405180910390fd5b6105cd838361109b565b505050565b6105e36105dd611093565b82611154565b610622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061990612c56565b60405180910390fd5b61062d8383836111e9565b505050565b6000806000600860008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036107c75760076040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090505b60006107d16114e2565b6bffffffffffffffffffffffff1682602001516bffffffffffffffffffffffff16866107fd9190612ca5565b6108079190612d16565b90508160000151819350935050509250929050565b61083783838360405180602001604052806000815250610ae3565b505050565b600080610848836114ec565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090612d93565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610932576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092990612e25565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60095481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0490612e91565b60405180910390fd5b610a15611529565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060018054610a4a90612a8f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7690612a8f565b8015610ac35780601f10610a9857610100808354040283529160200191610ac3565b820191906000526020600020905b815481529060010190602001808311610aa657829003601f168201915b5050505050905090565b610adf610ad8611093565b8383611576565b5050565b610af4610aee611093565b83611154565b610b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2a90612c56565b60405180910390fd5b610b3f848484846116e2565b50505050565b6060610b5082611048565b6000600660008481526020019081526020016000208054610b7090612a8f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9c90612a8f565b8015610be95780601f10610bbe57610100808354040283529160200191610be9565b820191906000526020600020905b815481529060010190602001808311610bcc57829003601f168201915b505050505090506000610bfa61173e565b90506000815103610c0f578192505050610c52565b600082511115610c44578082604051602001610c2c929190612eed565b60405160208183030381529060405292505050610c52565b610c4d84611755565b925050505b919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ce7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cde90612e91565b60405180910390fd5b6000825111610d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2290612f5d565b60405180910390fd5b6000600160096000828254610d409190612f7d565b9250508190559050610d5233826117bd565b610d5c81846117db565b7f1c15becec49ef0b92b749e7df116e7023bce1f3ae6f98bf165bd99dec5291f6c818433610d886103e3565b604051610d989493929190612fb1565b60405180910390a180915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ecb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec290612e91565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3190613050565b60405180910390fd5b6103e88161ffff161115610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a906130e2565b60405180910390fd5b610f91828261ffff16611848565b7fd556b9ecb33560a77e60c535c70ecdf5eceb082cda7c41818efb18d40ed3493f8282604051610fc2929190613155565b60405180910390a15050565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110415750611040826119dd565b5b9050919050565b61105181611abf565b611090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108790612d93565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661110e8361083c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111608361083c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806111a257506111a18185610da9565b5b806111e057508373ffffffffffffffffffffffffffffffffffffffff166111c884610475565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112098261083c565b73ffffffffffffffffffffffffffffffffffffffff161461125f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611256906131f0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c590613282565b60405180910390fd5b6112db8383836001611b00565b8273ffffffffffffffffffffffffffffffffffffffff166112fb8261083c565b73ffffffffffffffffffffffffffffffffffffffff1614611351576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611348906131f0565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114dd8383836001611c26565b505050565b6000612710905090565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6007600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff02191690555050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115db906132ee565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116d5919061238d565b60405180910390a3505050565b6116ed8484846111e9565b6116f984848484611c2c565b611738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172f90613380565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061176082611048565b600061176a61173e565b9050600081511161178a57604051806020016040528060008152506117b5565b8061179484611db3565b6040516020016117a5929190612eed565b6040516020818303038152906040525b915050919050565b6117d7828260405180602001604052806000815250611e81565b5050565b6117e482611abf565b611823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181a90613412565b60405180910390fd5b8060066000848152602001908152602001600020908161184391906135d4565b505050565b6118506114e2565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff1611156118ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a590613718565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361191d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191490613784565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff16815250600760008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611aa857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611ab85750611ab782611edc565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611ae1836114ec565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115611c2057600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611b945780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b8c91906137a4565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c1f5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c179190612f7d565b925050819055505b5b50505050565b50505050565b6000611c4d8473ffffffffffffffffffffffffffffffffffffffff16611f46565b15611da6578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c76611093565b8786866040518563ffffffff1660e01b8152600401611c98949392919061382d565b6020604051808303816000875af1925050508015611cd457506040513d601f19601f82011682018060405250810190611cd1919061388e565b60015b611d56573d8060008114611d04576040519150601f19603f3d011682016040523d82523d6000602084013e611d09565b606091505b506000815103611d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4590613380565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611dab565b600190505b949350505050565b606060006001611dc284611f69565b01905060008167ffffffffffffffff811115611de157611de061270e565b5b6040519080825280601f01601f191660200182016040528015611e135781602001600182028036833780820191505090505b509050600082602001820190505b600115611e76578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611e6a57611e69612ce7565b5b04945060008503611e21575b819350505050919050565b611e8b83836120bc565b611e986000848484611c2c565b611ed7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ece90613380565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611fc7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611fbd57611fbc612ce7565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612004576d04ee2d6d415b85acef81000000008381611ffa57611ff9612ce7565b5b0492506020810190505b662386f26fc10000831061203357662386f26fc10000838161202957612028612ce7565b5b0492506010810190505b6305f5e100831061205c576305f5e100838161205257612051612ce7565b5b0492506008810190505b612710831061208157612710838161207757612076612ce7565b5b0492506004810190505b606483106120a4576064838161209a57612099612ce7565b5b0492506002810190505b600a83106120b3576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361212b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212290613907565b60405180910390fd5b61213481611abf565b15612174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216b90613973565b60405180910390fd5b612182600083836001611b00565b61218b81611abf565b156121cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c290613973565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122d5600083836001611c26565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612322816122ed565b811461232d57600080fd5b50565b60008135905061233f81612319565b92915050565b60006020828403121561235b5761235a6122e3565b5b600061236984828501612330565b91505092915050565b60008115159050919050565b61238781612372565b82525050565b60006020820190506123a2600083018461237e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123e25780820151818401526020810190506123c7565b60008484015250505050565b6000601f19601f8301169050919050565b600061240a826123a8565b61241481856123b3565b93506124248185602086016123c4565b61242d816123ee565b840191505092915050565b6000602082019050818103600083015261245281846123ff565b905092915050565b6000819050919050565b61246d8161245a565b811461247857600080fd5b50565b60008135905061248a81612464565b92915050565b6000602082840312156124a6576124a56122e3565b5b60006124b48482850161247b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124e8826124bd565b9050919050565b6124f8816124dd565b82525050565b600060208201905061251360008301846124ef565b92915050565b612522816124dd565b811461252d57600080fd5b50565b60008135905061253f81612519565b92915050565b6000806040838503121561255c5761255b6122e3565b5b600061256a85828601612530565b925050602061257b8582860161247b565b9150509250929050565b60008060006060848603121561259e5761259d6122e3565b5b60006125ac86828701612530565b93505060206125bd86828701612530565b92505060406125ce8682870161247b565b9150509250925092565b600080604083850312156125ef576125ee6122e3565b5b60006125fd8582860161247b565b925050602061260e8582860161247b565b9150509250929050565b6126218161245a565b82525050565b600060408201905061263c60008301856124ef565b6126496020830184612618565b9392505050565b600060208284031215612666576126656122e3565b5b600061267484828501612530565b91505092915050565b60006020820190506126926000830184612618565b92915050565b6126a181612372565b81146126ac57600080fd5b50565b6000813590506126be81612698565b92915050565b600080604083850312156126db576126da6122e3565b5b60006126e985828601612530565b92505060206126fa858286016126af565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612746826123ee565b810181811067ffffffffffffffff821117156127655761276461270e565b5b80604052505050565b60006127786122d9565b9050612784828261273d565b919050565b600067ffffffffffffffff8211156127a4576127a361270e565b5b6127ad826123ee565b9050602081019050919050565b82818337600083830152505050565b60006127dc6127d784612789565b61276e565b9050828152602081018484840111156127f8576127f7612709565b5b6128038482856127ba565b509392505050565b600082601f8301126128205761281f612704565b5b81356128308482602086016127c9565b91505092915050565b60008060008060808587031215612853576128526122e3565b5b600061286187828801612530565b945050602061287287828801612530565b93505060406128838782880161247b565b925050606085013567ffffffffffffffff8111156128a4576128a36122e8565b5b6128b08782880161280b565b91505092959194509250565b600067ffffffffffffffff8211156128d7576128d661270e565b5b6128e0826123ee565b9050602081019050919050565b60006129006128fb846128bc565b61276e565b90508281526020810184848401111561291c5761291b612709565b5b6129278482856127ba565b509392505050565b600082601f83011261294457612943612704565b5b81356129548482602086016128ed565b91505092915050565b600060208284031215612973576129726122e3565b5b600082013567ffffffffffffffff811115612991576129906122e8565b5b61299d8482850161292f565b91505092915050565b600080604083850312156129bd576129bc6122e3565b5b60006129cb85828601612530565b92505060206129dc85828601612530565b9150509250929050565b600061ffff82169050919050565b6129fd816129e6565b8114612a0857600080fd5b50565b600081359050612a1a816129f4565b92915050565b60008060408385031215612a3757612a366122e3565b5b6000612a4585828601612530565b9250506020612a5685828601612a0b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612aa757607f821691505b602082108103612aba57612ab9612a60565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b1c6021836123b3565b9150612b2782612ac0565b604082019050919050565b60006020820190508181036000830152612b4b81612b0f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612bae603d836123b3565b9150612bb982612b52565b604082019050919050565b60006020820190508181036000830152612bdd81612ba1565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612c40602d836123b3565b9150612c4b82612be4565b604082019050919050565b60006020820190508181036000830152612c6f81612c33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612cb08261245a565b9150612cbb8361245a565b9250828202612cc98161245a565b91508282048414831517612ce057612cdf612c76565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d218261245a565b9150612d2c8361245a565b925082612d3c57612d3b612ce7565b5b828204905092915050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612d7d6018836123b3565b9150612d8882612d47565b602082019050919050565b60006020820190508181036000830152612dac81612d70565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612e0f6029836123b3565b9150612e1a82612db3565b604082019050919050565b60006020820190508181036000830152612e3e81612e02565b9050919050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000612e7b6009836123b3565b9150612e8682612e45565b602082019050919050565b60006020820190508181036000830152612eaa81612e6e565b9050919050565b600081905092915050565b6000612ec7826123a8565b612ed18185612eb1565b9350612ee18185602086016123c4565b80840191505092915050565b6000612ef98285612ebc565b9150612f058284612ebc565b91508190509392505050565b7f6e6f20746f6b656e207572690000000000000000000000000000000000000000600082015250565b6000612f47600c836123b3565b9150612f5282612f11565b602082019050919050565b60006020820190508181036000830152612f7681612f3a565b9050919050565b6000612f888261245a565b9150612f938361245a565b9250828201905080821115612fab57612faa612c76565b5b92915050565b6000608082019050612fc66000830187612618565b8181036020830152612fd881866123ff565b9050612fe760408301856124ef565b8181036060830152612ff981846123ff565b905095945050505050565b7f726563697069656e742063616e6e6f7420626520656d70747900000000000000600082015250565b600061303a6019836123b3565b915061304582613004565b602082019050919050565b600060208201905081810360008301526130698161302d565b9050919050565b7f726f79616c7479206665652063616e6e6f74206265206d6f7265207468616e2060008201527f3130250000000000000000000000000000000000000000000000000000000000602082015250565b60006130cc6023836123b3565b91506130d782613070565b604082019050919050565b600060208201905081810360008301526130fb816130bf565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b6000819050919050565b600061313f61313a613135846129e6565b61311a565b613102565b9050919050565b61314f81613124565b82525050565b600060408201905061316a60008301856124ef565b6131776020830184613146565b9392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006131da6025836123b3565b91506131e58261317e565b604082019050919050565b60006020820190508181036000830152613209816131cd565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061326c6024836123b3565b915061327782613210565b604082019050919050565b6000602082019050818103600083015261329b8161325f565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006132d86019836123b3565b91506132e3826132a2565b602082019050919050565b60006020820190508181036000830152613307816132cb565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061336a6032836123b3565b91506133758261330e565b604082019050919050565b600060208201905081810360008301526133998161335d565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006133fc602e836123b3565b9150613407826133a0565b604082019050919050565b6000602082019050818103600083015261342b816133ef565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026134947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613457565b61349e8683613457565b95508019841693508086168417925050509392505050565b60006134d16134cc6134c78461245a565b61311a565b61245a565b9050919050565b6000819050919050565b6134eb836134b6565b6134ff6134f7826134d8565b848454613464565b825550505050565b600090565b613514613507565b61351f8184846134e2565b505050565b5b818110156135435761353860008261350c565b600181019050613525565b5050565b601f8211156135885761355981613432565b61356284613447565b81016020851015613571578190505b61358561357d85613447565b830182613524565b50505b505050565b600082821c905092915050565b60006135ab6000198460080261358d565b1980831691505092915050565b60006135c4838361359a565b9150826002028217905092915050565b6135dd826123a8565b67ffffffffffffffff8111156135f6576135f561270e565b5b6136008254612a8f565b61360b828285613547565b600060209050601f83116001811461363e576000841561362c578287015190505b61363685826135b8565b86555061369e565b601f19841661364c86613432565b60005b828110156136745784890151825560018201915060208501945060208101905061364f565b86831015613691578489015161368d601f89168261359a565b8355505b6001600288020188555050505b505050505050565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b6000613702602a836123b3565b915061370d826136a6565b604082019050919050565b60006020820190508181036000830152613731816136f5565b9050919050565b7f455243323938313a20696e76616c696420726563656976657200000000000000600082015250565b600061376e6019836123b3565b915061377982613738565b602082019050919050565b6000602082019050818103600083015261379d81613761565b9050919050565b60006137af8261245a565b91506137ba8361245a565b92508282039050818111156137d2576137d1612c76565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006137ff826137d8565b61380981856137e3565b93506138198185602086016123c4565b613822816123ee565b840191505092915050565b600060808201905061384260008301876124ef565b61384f60208301866124ef565b61385c6040830185612618565b818103606083015261386e81846137f4565b905095945050505050565b60008151905061388881612319565b92915050565b6000602082840312156138a4576138a36122e3565b5b60006138b284828501613879565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006138f16020836123b3565b91506138fc826138bb565b602082019050919050565b60006020820190508181036000830152613920816138e4565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061395d601c836123b3565b915061396882613927565b602082019050919050565b6000602082019050818103600083015261398c81613950565b905091905056fea264697066735822122042eeb8818358e8754551568301f1a74c182c668eadae0b3be4098108f91cb11d64736f6c63430008110033a2646970667358221220bd57121693d3310ba61b369efd6bcb6c88f5c7bf5fefb6d3ae59ceeca7b28ceb64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createCollection(string,string,uint16,address)": {
        "params": {
          "_collectionFeeRecipient": "address of fee recipient",
          "_name": "collection name",
          "_royaltyFee": "collection royalty fee",
          "_symbol": "collection symbol"
        }
      },
      "updateFeeRecipient(address)": {
        "details": "only admin",
        "params": {
          "_feeRecipient": "new fee recipient to receive platform fee"
        }
      },
      "updatePlatformFee(uint256)": {
        "details": "only admin",
        "params": {
          "_platformFee": "new platform fee to set"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collectionsOwned(address,uint256)": {
        "notice": "user address -> collection addresses array"
      },
      "createCollection(string,string,uint16,address)": {
        "notice": "method for creating new collection"
      },
      "deployedCollections(uint256)": {
        "notice": "deployed and available collections array"
      },
      "feeRecipient()": {
        "notice": "fee recipient"
      },
      "getCollectionsOwned(address)": {
        "notice": "method for getting all addresses owned by user"
      },
      "owner()": {
        "notice": "owner of the collection"
      },
      "platformFee()": {
        "notice": "platform fee for each new nft collection"
      },
      "updateFeeRecipient(address)": {
        "notice": "updates the fee recipient"
      },
      "updatePlatformFee(uint256)": {
        "notice": "updates the platform fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6493,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "collectionsOwned",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(Collection)6486_storage)dyn_storage)"
      },
      {
        "astId": 6499,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 6502,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "platformFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6506,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "deployedCollections",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Collection)6486_storage)dyn_storage": {
        "base": "t_struct(Collection)6486_storage",
        "encoding": "dynamic_array",
        "label": "struct NFTFactory.Collection[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Collection)6486_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NFTFactory.Collection[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Collection)6486_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Collection)6486_storage": {
        "encoding": "inplace",
        "label": "struct NFTFactory.Collection",
        "members": [
          {
            "astId": 6483,
            "contract": "contracts/NFTFactory.sol:NFTFactory",
            "label": "collectionAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6485,
            "contract": "contracts/NFTFactory.sol:NFTFactory",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}